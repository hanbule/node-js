/*
 * This file has been automatically generated by Soupply and released under the MIT license.
 * Generated from data/java393.xml
 */
import Packet from 'packet';
import Types from 'types';

const PlayClientbound = {

  SpawnObject: class extends Packet {

    static get ID(){ return 0; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 0;
    }

    constructor(entityId=0, uuid=new Uint8Array(16), type=0, position={x:0,y:0,z:0}, pitch=0, yaw=0, data=0, velocity={x:0,y:0,z:0}) {
      super();
      this.entityId = entityId;
      this.uuid = uuid;
      this.type = type;
      this.position = position;
      this.pitch = pitch;
      this.yaw = yaw;
      this.data = data;
      this.velocity = velocity;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.entityId);
      this.writeBytes(this.uuid);
      this.writeByte(this.type);
      this.writeBigEndianDouble(this.position.x);
      this.writeBigEndianDouble(this.position.y);
      this.writeBigEndianDouble(this.position.z);
      this.writeByte(this.pitch);
      this.writeByte(this.yaw);
      this.writeBigEndianInt(this.data);
      this.writeBigEndianShort(this.velocity.x);
      this.writeBigEndianShort(this.velocity.y);
      this.writeBigEndianShort(this.velocity.z);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.entityId=this.readVaruint();
      traceDecode('entityId');
      this.uuid=this.readBytes(16);
      traceDecode('uuid');
      this.type=this.readByte();
      traceDecode('type');
      this.position={};
      this.position.x=this.readBigEndianDouble();
      this.position.y=this.readBigEndianDouble();
      this.position.z=this.readBigEndianDouble();
      traceDecode('position');
      this.pitch=this.readByte();
      traceDecode('pitch');
      this.yaw=this.readByte();
      traceDecode('yaw');
      this.data=this.readBigEndianInt();
      traceDecode('data');
      this.velocity={};
      this.velocity.x=this.readBigEndianShort();
      this.velocity.y=this.readBigEndianShort();
      this.velocity.z=this.readBigEndianShort();
      traceDecode('velocity');
      return this;
    }

    /** @return {string} */
    toString() {
      return "SpawnObject(entityId: " + this.entityId + ", uuid: " + this.uuid + ", type: " + this.type + ", position: " + this.position + ", pitch: " + this.pitch + ", yaw: " + this.yaw + ", data: " + this.data + ", velocity: " + this.velocity + ")";
    }

  }
  ,

  SpawnExperienceOrb: class extends Packet {

    static get ID(){ return 1; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 1;
    }

    constructor(entityId=0, position={x:0,y:0,z:0}, count=0) {
      super();
      this.entityId = entityId;
      this.position = position;
      this.count = count;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.entityId);
      this.writeBigEndianDouble(this.position.x);
      this.writeBigEndianDouble(this.position.y);
      this.writeBigEndianDouble(this.position.z);
      this.writeBigEndianShort(this.count);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.entityId=this.readVaruint();
      traceDecode('entityId');
      this.position={};
      this.position.x=this.readBigEndianDouble();
      this.position.y=this.readBigEndianDouble();
      this.position.z=this.readBigEndianDouble();
      traceDecode('position');
      this.count=this.readBigEndianShort();
      traceDecode('count');
      return this;
    }

    /** @return {string} */
    toString() {
      return "SpawnExperienceOrb(entityId: " + this.entityId + ", position: " + this.position + ", count: " + this.count + ")";
    }

  }
  ,

  SpawnGlobalEntity: class extends Packet {

    static get ID(){ return 2; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 2;
    }

    // type
    static get THUNDERBOLT(){ return 1; };

    constructor(entityId=0, type=0, position={x:0,y:0,z:0}) {
      super();
      this.entityId = entityId;
      this.type = type;
      this.position = position;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.entityId);
      this.writeByte(this.type);
      this.writeBigEndianDouble(this.position.x);
      this.writeBigEndianDouble(this.position.y);
      this.writeBigEndianDouble(this.position.z);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.entityId=this.readVaruint();
      traceDecode('entityId');
      this.type=this.readByte();
      traceDecode('type');
      this.position={};
      this.position.x=this.readBigEndianDouble();
      this.position.y=this.readBigEndianDouble();
      this.position.z=this.readBigEndianDouble();
      traceDecode('position');
      return this;
    }

    /** @return {string} */
    toString() {
      return "SpawnGlobalEntity(entityId: " + this.entityId + ", type: " + this.type + ", position: " + this.position + ")";
    }

  }
  ,

  SpawnMob: class extends Packet {

    static get ID(){ return 3; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 3;
    }

    constructor(entityId=0, uuid=new Uint8Array(16), type=0, position={x:0,y:0,z:0}, yaw=0, pitch=0, headPitch=0, velocity={x:0,y:0,z:0}, metadata=new Metadata()) {
      super();
      this.entityId = entityId;
      this.uuid = uuid;
      this.type = type;
      this.position = position;
      this.yaw = yaw;
      this.pitch = pitch;
      this.headPitch = headPitch;
      this.velocity = velocity;
      this.metadata = metadata;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.entityId);
      this.writeBytes(this.uuid);
      this.writeVaruint(this.type);
      this.writeBigEndianDouble(this.position.x);
      this.writeBigEndianDouble(this.position.y);
      this.writeBigEndianDouble(this.position.z);
      this.writeByte(this.yaw);
      this.writeByte(this.pitch);
      this.writeByte(this.headPitch);
      this.writeBigEndianShort(this.velocity.x);
      this.writeBigEndianShort(this.velocity.y);
      this.writeBigEndianShort(this.velocity.z);
      this.writeBytes(this.metadata.encodeBody(true));
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.entityId=this.readVaruint();
      traceDecode('entityId');
      this.uuid=this.readBytes(16);
      traceDecode('uuid');
      this.type=this.readVaruint();
      traceDecode('type');
      this.position={};
      this.position.x=this.readBigEndianDouble();
      this.position.y=this.readBigEndianDouble();
      this.position.z=this.readBigEndianDouble();
      traceDecode('position');
      this.yaw=this.readByte();
      traceDecode('yaw');
      this.pitch=this.readByte();
      traceDecode('pitch');
      this.headPitch=this.readByte();
      traceDecode('headPitch');
      this.velocity={};
      this.velocity.x=this.readBigEndianShort();
      this.velocity.y=this.readBigEndianShort();
      this.velocity.z=this.readBigEndianShort();
      traceDecode('velocity');
      this.metadata=new Metadata().decodeBody(this._buffer);
      this._buffer=this.metadata._buffer;
      traceDecode('metadata');
      return this;
    }

    /** @return {string} */
    toString() {
      return "SpawnMob(entityId: " + this.entityId + ", uuid: " + this.uuid + ", type: " + this.type + ", position: " + this.position + ", yaw: " + this.yaw + ", pitch: " + this.pitch + ", headPitch: " + this.headPitch + ", velocity: " + this.velocity + ", metadata: " + this.metadata + ")";
    }

  }
  ,

  SpawnPainting: class extends Packet {

    static get ID(){ return 4; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 4;
    }

    // motive
    static get KEBAB(){ return 0; };
    static get AZTEC(){ return 1; };
    static get ALBAN(){ return 2; };
    static get AZTEC2(){ return 3; };
    static get BOMB(){ return 4; };
    static get PLANT(){ return 5; };
    static get WASTELAND(){ return 6; };
    static get POOL(){ return 7; };
    static get COURBET(){ return 8; };
    static get SEA(){ return 9; };
    static get SUNSET(){ return 10; };
    static get CREEBET(){ return 11; };
    static get WANDERER(){ return 12; };
    static get GRAHAM(){ return 13; };
    static get MATCH(){ return 14; };
    static get BUST(){ return 15; };
    static get STAGE(){ return 16; };
    static get VOID(){ return 17; };
    static get SULL_AND_ROSES(){ return 18; };
    static get WITHER(){ return 19; };
    static get FIGHTERS(){ return 20; };
    static get POINTER(){ return 21; };
    static get PIGSCENE(){ return 22; };
    static get BURNING_SKULL(){ return 23; };
    static get SKELETON(){ return 24; };
    static get DONKEY_KONG(){ return 25; };

    // direction
    static get SOUTH(){ return 0; };
    static get WEST(){ return 1; };
    static get NORTH(){ return 2; };
    static get EAST(){ return 3; };

    constructor(entityId=0, uuid=new Uint8Array(16), motive=0, position=0, direction=0) {
      super();
      this.entityId = entityId;
      this.uuid = uuid;
      this.motive = motive;
      this.position = position;
      this.direction = direction;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.entityId);
      this.writeBytes(this.uuid);
      this.writeVaruint(this.motive);
      this.writeBigEndianLong(this.position);
      this.writeByte(this.direction);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.entityId=this.readVaruint();
      traceDecode('entityId');
      this.uuid=this.readBytes(16);
      traceDecode('uuid');
      this.motive=this.readVaruint();
      traceDecode('motive');
      this.position=this.readBigEndianLong();
      traceDecode('position');
      this.direction=this.readByte();
      traceDecode('direction');
      return this;
    }

    /** @return {string} */
    toString() {
      return "SpawnPainting(entityId: " + this.entityId + ", uuid: " + this.uuid + ", motive: " + this.motive + ", position: " + this.position + ", direction: " + this.direction + ")";
    }

  }
  ,

  SpawnPlayer: class extends Packet {

    static get ID(){ return 5; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 5;
    }

    constructor(entityId=0, uuid=new Uint8Array(16), position={x:0,y:0,z:0}, yaw=0, pitch=0, metadata=new Metadata()) {
      super();
      this.entityId = entityId;
      this.uuid = uuid;
      this.position = position;
      this.yaw = yaw;
      this.pitch = pitch;
      this.metadata = metadata;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.entityId);
      this.writeBytes(this.uuid);
      this.writeBigEndianDouble(this.position.x);
      this.writeBigEndianDouble(this.position.y);
      this.writeBigEndianDouble(this.position.z);
      this.writeByte(this.yaw);
      this.writeByte(this.pitch);
      this.writeBytes(this.metadata.encodeBody(true));
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.entityId=this.readVaruint();
      traceDecode('entityId');
      this.uuid=this.readBytes(16);
      traceDecode('uuid');
      this.position={};
      this.position.x=this.readBigEndianDouble();
      this.position.y=this.readBigEndianDouble();
      this.position.z=this.readBigEndianDouble();
      traceDecode('position');
      this.yaw=this.readByte();
      traceDecode('yaw');
      this.pitch=this.readByte();
      traceDecode('pitch');
      this.metadata=new Metadata().decodeBody(this._buffer);
      this._buffer=this.metadata._buffer;
      traceDecode('metadata');
      return this;
    }

    /** @return {string} */
    toString() {
      return "SpawnPlayer(entityId: " + this.entityId + ", uuid: " + this.uuid + ", position: " + this.position + ", yaw: " + this.yaw + ", pitch: " + this.pitch + ", metadata: " + this.metadata + ")";
    }

  }
  ,

  Animation: class extends Packet {

    static get ID(){ return 6; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 6;
    }

    // animation
    static get SWING_MAIN_ARM(){ return 0; };
    static get TAKE_DAMAGE(){ return 1; };
    static get LEAVE_BED(){ return 2; };
    static get SWING_OFFHAND(){ return 3; };
    static get CRITICAL_EFFECT(){ return 4; };
    static get MAGICAL_CRITICAL_EFFECT(){ return 5; };

    constructor(entityId=0, animation=0) {
      super();
      this.entityId = entityId;
      this.animation = animation;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.entityId);
      this.writeByte(this.animation);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.entityId=this.readVaruint();
      traceDecode('entityId');
      this.animation=this.readByte();
      traceDecode('animation');
      return this;
    }

    /** @return {string} */
    toString() {
      return "Animation(entityId: " + this.entityId + ", animation: " + this.animation + ")";
    }

  }
  ,

  Statistics: class extends Packet {

    static get ID(){ return 7; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 7;
    }

    constructor(statistics=[]) {
      super();
      this.statistics = statistics;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.statistics.length);
      for(var dhc5dfan in this.statistics) {
        this.writeBytes(this.statistics[dhc5dfan].encodeBody(true));
      }
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      var aramcrdl=this.readVaruint();
      this.statistics=[];
      for(var dhc5dfan=0;dhc5dfan<aramcrdl;dhc5dfan++) {
        this.statistics[dhc5dfan]=new Types.Statistic().decodeBody(this._buffer);
        this._buffer=this.statistics[dhc5dfan]._buffer;
      }
      traceDecode('statistics');
      return this;
    }

    /** @return {string} */
    toString() {
      return "Statistics(statistics: " + this.statistics + ")";
    }

  }
  ,

  BlockBreakAnimation: class extends Packet {

    static get ID(){ return 8; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 8;
    }

    constructor(entityId=0, position=0, stage=0) {
      super();
      this.entityId = entityId;
      this.position = position;
      this.stage = stage;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.entityId);
      this.writeBigEndianLong(this.position);
      this.writeByte(this.stage);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.entityId=this.readVaruint();
      traceDecode('entityId');
      this.position=this.readBigEndianLong();
      traceDecode('position');
      this.stage=this.readByte();
      traceDecode('stage');
      return this;
    }

    /** @return {string} */
    toString() {
      return "BlockBreakAnimation(entityId: " + this.entityId + ", position: " + this.position + ", stage: " + this.stage + ")";
    }

  }
  ,

  UpdateBlockEntity: class extends Packet {

    static get ID(){ return 9; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 9;
    }

    // action
    static get MOB_SPAWNER_DATA(){ return 1; };
    static get COMMAND_BLOCK_TEXT(){ return 2; };
    static get BEACON_POWERS(){ return 3; };
    static get MOB_HEAD_DATA(){ return 4; };
    static get DECLARE_CONDUIT(){ return 5; };
    static get BANNER_DATA(){ return 6; };
    static get STRUCTURE_DATA(){ return 7; };
    static get END_GATEWAY_DESTINATION(){ return 8; };
    static get SIGN_TEXT(){ return 9; };
    static get SHULKER_BOX_DECLARATION(){ return 10; };
    static get DECLARE_BED(){ return 11; };

    constructor(position=0, action=0, nbt=new Types.Bytes()) {
      super();
      this.position = position;
      this.action = action;
      this.nbt = nbt;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeBigEndianLong(this.position);
      this.writeByte(this.action);
      this.writeBytes(this.nbt);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.position=this.readBigEndianLong();
      traceDecode('position');
      this.action=this.readByte();
      traceDecode('action');
      this.nbt=Array.from(this._buffer);
      this._buffer=[];
      traceDecode('nbt');
      return this;
    }

    /** @return {string} */
    toString() {
      return "UpdateBlockEntity(position: " + this.position + ", action: " + this.action + ", nbt: " + this.nbt + ")";
    }

  }
  ,

  BlockAction: class extends Packet {

    static get ID(){ return 10; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 10;
    }

    // action
    static get NOTE_BLOCK_HARP(){ return 0; };
    static get NOTE_BLOCK_BASS_DRUM(){ return 1; };
    static get NOTE_BLOCK_SNARE_DRUM(){ return 2; };
    static get NOTE_BLOCK_CLICKS(){ return 3; };
    static get NOTE_BLOCK_STICKS(){ return 3; };
    static get NOTE_BLOCK_BASS_GUITAR(){ return 4; };
    static get PISTON_EXTEND(){ return 0; };
    static get PISTON_RETRACT(){ return 1; };
    static get CHEST_WATCHERS(){ return 1; };
    static get BEACON_RECALCULATE(){ return 1; };
    static get MOB_SPAWNER_RESET_DELAY(){ return 1; };
    static get END_GATEWAY_YELLOW_BEAM(){ return 1; };

    // parameter
    static get PISTON_DOWN(){ return 0; };
    static get PISTON_UP(){ return 1; };
    static get PISTON_SOUTH(){ return 2; };
    static get PISTON_WEST(){ return 3; };
    static get PISTON_NORTH(){ return 4; };
    static get PISTON_EAST(){ return 5; };

    constructor(position=0, action=0, parameter=0, blockType=0) {
      super();
      this.position = position;
      this.action = action;
      this.parameter = parameter;
      this.blockType = blockType;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeBigEndianLong(this.position);
      this.writeByte(this.action);
      this.writeByte(this.parameter);
      this.writeVaruint(this.blockType);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.position=this.readBigEndianLong();
      traceDecode('position');
      this.action=this.readByte();
      traceDecode('action');
      this.parameter=this.readByte();
      traceDecode('parameter');
      this.blockType=this.readVaruint();
      traceDecode('blockType');
      return this;
    }

    /** @return {string} */
    toString() {
      return "BlockAction(position: " + this.position + ", action: " + this.action + ", parameter: " + this.parameter + ", blockType: " + this.blockType + ")";
    }

  }
  ,

  BlockChange: class extends Packet {

    static get ID(){ return 11; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 11;
    }

    constructor(position=0, block=0) {
      super();
      this.position = position;
      this.block = block;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeBigEndianLong(this.position);
      this.writeVaruint(this.block);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.position=this.readBigEndianLong();
      traceDecode('position');
      this.block=this.readVaruint();
      traceDecode('block');
      return this;
    }

    /** @return {string} */
    toString() {
      return "BlockChange(position: " + this.position + ", block: " + this.block + ")";
    }

  }
  ,

  BossBar: class extends Packet {

    static get ID(){ return 12; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 12;
    }

    // action (variant)
    static get ADD(){ return 0; };
    static get REMOVE(){ return 1; };
    static get UPDATE_HEALTH(){ return 2; };
    static get UPDATE_TITLE(){ return 3; };
    static get UPDATE_STYLE(){ return 4; };
    static get UPDATE_FLAGS(){ return 5; };

    constructor(uuid=new Uint8Array(16), action=0) {
      super();
      this.uuid = uuid;
      this.action = action;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeBytes(this.uuid);
      this.writeVaruint(this.action);
      switch(this.action) {
        case 0:
          this.writeBytes(this.uuid);
          this.writeVaruint(this.action);
          break;
        case 1:
          this.writeBytes(this.uuid);
          this.writeVaruint(this.action);
          break;
        case 2:
          this.writeBytes(this.uuid);
          this.writeVaruint(this.action);
          break;
        case 3:
          this.writeBytes(this.uuid);
          this.writeVaruint(this.action);
          break;
        case 4:
          this.writeBytes(this.uuid);
          this.writeVaruint(this.action);
          break;
        case 5:
          this.writeBytes(this.uuid);
          this.writeVaruint(this.action);
          break;
        default: break;
      }
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.uuid=this.readBytes(16);
      traceDecode('uuid');
      this.action=this.readVaruint();
      traceDecode('action');
      switch(this.action) {
        case 0:
          var dhc5arz=this.readVaruint();
          this.title=this.decodeString(this.readBytes(dhc5arz));
          this.health=this.readBigEndianFloat();
          this.color=this.readVaruint();
          this.division=this.readVaruint();
          this.flags=this.readByte();
          break;
        case 1:
          break;
        case 2:
          this.health=this.readBigEndianFloat();
          break;
        case 3:
          var dhc5arz=this.readVaruint();
          this.title=this.decodeString(this.readBytes(dhc5arz));
          break;
        case 4:
          this.color=this.readVaruint();
          this.division=this.readVaruint();
          break;
        case 5:
          this.flags=this.readByte();
          break;
        default: break;
      }
      return this;
    }

    /** @return {string} */
    toString() {
      return "BossBar(uuid: " + this.uuid + ", action: " + this.action + ")";
    }

  }
  ,

  ServerDifficulty: class extends Packet {

    static get ID(){ return 13; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 13;
    }

    // difficulty
    static get PEACEFUL(){ return 0; };
    static get EASY(){ return 1; };
    static get NORMAL(){ return 2; };
    static get HARD(){ return 3; };

    constructor(difficulty=0) {
      super();
      this.difficulty = difficulty;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeByte(this.difficulty);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.difficulty=this.readByte();
      traceDecode('difficulty');
      return this;
    }

    /** @return {string} */
    toString() {
      return "ServerDifficulty(difficulty: " + this.difficulty + ")";
    }

  }
  ,

  ChatMessage: class extends Packet {

    static get ID(){ return 14; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 14;
    }

    // position
    static get CHAT(){ return 0; };
    static get SYSTEM_MESSAGE(){ return 1; };
    static get ABOVE_HOTBAR(){ return 2; };

    constructor(message="", position=0) {
      super();
      this.message = message;
      this.position = position;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      var dhc5znyd=this.encodeString(this.message);
      this.writeVaruint(dhc5znyd.length);
      this.writeBytes(dhc5znyd);
      this.writeByte(this.position);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      var dhc5znyd=this.readVaruint();
      this.message=this.decodeString(this.readBytes(dhc5znyd));
      traceDecode('message');
      this.position=this.readByte();
      traceDecode('position');
      return this;
    }

    /** @return {string} */
    toString() {
      return "ChatMessage(message: " + this.message + ", position: " + this.position + ")";
    }

  }
  ,

  MultiBlockChange: class extends Packet {

    static get ID(){ return 15; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 15;
    }

    constructor(chunk={x:0,z:0}, changes=[]) {
      super();
      this.chunk = chunk;
      this.changes = changes;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeBigEndianInt(this.chunk.x);
      this.writeBigEndianInt(this.chunk.z);
      this.writeVaruint(this.changes.length);
      for(var dhc5afzv in this.changes) {
        this.writeBytes(this.changes[dhc5afzv].encodeBody(true));
      }
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.chunk={};
      this.chunk.x=this.readBigEndianInt();
      this.chunk.z=this.readBigEndianInt();
      traceDecode('chunk');
      var aramyhbd=this.readVaruint();
      this.changes=[];
      for(var dhc5afzv=0;dhc5afzv<aramyhbd;dhc5afzv++) {
        this.changes[dhc5afzv]=new Types.BlockChange().decodeBody(this._buffer);
        this._buffer=this.changes[dhc5afzv]._buffer;
      }
      traceDecode('changes');
      return this;
    }

    /** @return {string} */
    toString() {
      return "MultiBlockChange(chunk: " + this.chunk + ", changes: " + this.changes + ")";
    }

  }
  ,

  TabComplete: class extends Packet {

    static get ID(){ return 16; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 16;
    }

    constructor(transactionId=0, start=0, end=0, matches=[]) {
      super();
      this.transactionId = transactionId;
      this.start = start;
      this.end = end;
      this.matches = matches;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.transactionId);
      this.writeVaruint(this.start);
      this.writeVaruint(this.end);
      this.writeVaruint(this.matches.length);
      for(var dhc5yrav in this.matches) {
        this.writeBytes(this.matches[dhc5yrav].encodeBody(true));
      }
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.transactionId=this.readVaruint();
      traceDecode('transactionId');
      this.start=this.readVaruint();
      traceDecode('start');
      this.end=this.readVaruint();
      traceDecode('end');
      var arambfyh=this.readVaruint();
      this.matches=[];
      for(var dhc5yrav=0;dhc5yrav<arambfyh;dhc5yrav++) {
        this.matches[dhc5yrav]=new Types.Match().decodeBody(this._buffer);
        this._buffer=this.matches[dhc5yrav]._buffer;
      }
      traceDecode('matches');
      return this;
    }

    /** @return {string} */
    toString() {
      return "TabComplete(transactionId: " + this.transactionId + ", start: " + this.start + ", end: " + this.end + ", matches: " + this.matches + ")";
    }

  }
  ,

  DeclareCommands: class extends Packet {

    static get ID(){ return 17; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 17;
    }

    constructor(nodes=[], rootIndex=0) {
      super();
      this.nodes = nodes;
      this.rootIndex = rootIndex;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.nodes.length);
      for(var dhc5brc in this.nodes) {
        this.writeBytes(this.nodes[dhc5brc].encodeBody(true));
      }
      this.writeVaruint(this.rootIndex);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      var aramb9zm=this.readVaruint();
      this.nodes=[];
      for(var dhc5brc=0;dhc5brc<aramb9zm;dhc5brc++) {
        this.nodes[dhc5brc]=new Types.Node().decodeBody(this._buffer);
        this._buffer=this.nodes[dhc5brc]._buffer;
      }
      traceDecode('nodes');
      this.rootIndex=this.readVaruint();
      traceDecode('rootIndex');
      return this;
    }

    /** @return {string} */
    toString() {
      return "DeclareCommands(nodes: " + this.nodes + ", rootIndex: " + this.rootIndex + ")";
    }

  }
  ,

  ConfirmTransaction: class extends Packet {

    static get ID(){ return 18; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 18;
    }

    constructor(window=0, action=0, accepted=false) {
      super();
      this.window = window;
      this.action = action;
      this.accepted = accepted;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeByte(this.window);
      this.writeBigEndianShort(this.action);
      this.writeBool(this.accepted);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.window=this.readByte();
      traceDecode('window');
      this.action=this.readBigEndianShort();
      traceDecode('action');
      this.accepted=this.readBool();
      traceDecode('accepted');
      return this;
    }

    /** @return {string} */
    toString() {
      return "ConfirmTransaction(window: " + this.window + ", action: " + this.action + ", accepted: " + this.accepted + ")";
    }

  }
  ,

  CloseWindow: class extends Packet {

    static get ID(){ return 19; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 19;
    }

    constructor(window=0) {
      super();
      this.window = window;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeByte(this.window);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.window=this.readByte();
      traceDecode('window');
      return this;
    }

    /** @return {string} */
    toString() {
      return "CloseWindow(window: " + this.window + ")";
    }

  }
  ,

  OpenWindow: class extends Packet {

    static get ID(){ return 20; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 20;
    }

    constructor(window=0, type="", title="", slots=0) {
      super();
      this.window = window;
      this.type = type;
      this.title = title;
      this.slots = slots;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeByte(this.window);
      var dhc5eb=this.encodeString(this.type);
      this.writeVaruint(dhc5eb.length);
      this.writeBytes(dhc5eb);
      var dhc5arz=this.encodeString(this.title);
      this.writeVaruint(dhc5arz.length);
      this.writeBytes(dhc5arz);
      this.writeByte(this.slots);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.window=this.readByte();
      traceDecode('window');
      var dhc5eb=this.readVaruint();
      this.type=this.decodeString(this.readBytes(dhc5eb));
      traceDecode('type');
      var dhc5arz=this.readVaruint();
      this.title=this.decodeString(this.readBytes(dhc5arz));
      traceDecode('title');
      this.slots=this.readByte();
      traceDecode('slots');
      return this;
    }

    /** @return {string} */
    toString() {
      return "OpenWindow(window: " + this.window + ", type: " + this.type + ", title: " + this.title + ", slots: " + this.slots + ")";
    }

  }
  ,

  WindowItems: class extends Packet {

    static get ID(){ return 21; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 21;
    }

    constructor(window=0, slots=[]) {
      super();
      this.window = window;
      this.slots = slots;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeByte(this.window);
      this.writeBigEndianShort(this.slots.length);
      for(var dhc5b9c in this.slots) {
        this.writeBytes(this.slots[dhc5b9c].encodeBody(true));
      }
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.window=this.readByte();
      traceDecode('window');
      var aramcxdm=this.readBigEndianShort();
      this.slots=[];
      for(var dhc5b9c=0;dhc5b9c<aramcxdm;dhc5b9c++) {
        this.slots[dhc5b9c]=new Types.Slot().decodeBody(this._buffer);
        this._buffer=this.slots[dhc5b9c]._buffer;
      }
      traceDecode('slots');
      return this;
    }

    /** @return {string} */
    toString() {
      return "WindowItems(window: " + this.window + ", slots: " + this.slots + ")";
    }

  }
  ,

  WindowProperty: class extends Packet {

    static get ID(){ return 22; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 22;
    }

    // property
    static get FURNANCE_FIRE_ICON(){ return 0; };
    static get FURNACE_MAX_FUEL_BURN_TIME(){ return 1; };
    static get FURNACE_PROGRESS_ARROW(){ return 2; };
    static get FURNCE_MAX_PROGRESS(){ return 3; };
    static get ENCHANTMENT_LEVEL_REQUIREMENT_TOP(){ return 0; };
    static get ENCHANTMENT_LEVEL_REQUIREMENT_MIDDLE(){ return 1; };
    static get ENCHANTMENT_LEVEL_REQUIREMENT_BOTTOM(){ return 2; };
    static get ENCHANTMENT_SEED(){ return 3; };
    static get ENCHANTMENT_ID_TOP(){ return 4; };
    static get ENCHANTMENT_ID_MIDDLE(){ return 5; };
    static get ENCHANTMENT_ID_BOTTOM(){ return 6; };
    static get ENCHANTMENT_LEVEL_TOP(){ return 7; };
    static get ENCHANTMENT_LEVEL_MIDDLE(){ return 8; };
    static get ENCHANTMENT_LEVEL_BOTTOM(){ return 9; };
    static get BEACON_POWER_LEVEL(){ return 0; };
    static get BEACON_FIRST_EFFECT(){ return 1; };
    static get BEACON_SECOND_EFFECT(){ return 2; };
    static get ANVIL_REPAIR_COST(){ return 0; };
    static get BREWING_STAND_BREW_TIME(){ return 0; };

    constructor(window=0, property=0, value=0) {
      super();
      this.window = window;
      this.property = property;
      this.value = value;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeByte(this.window);
      this.writeBigEndianShort(this.property);
      this.writeBigEndianShort(this.value);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.window=this.readByte();
      traceDecode('window');
      this.property=this.readBigEndianShort();
      traceDecode('property');
      this.value=this.readBigEndianShort();
      traceDecode('value');
      return this;
    }

    /** @return {string} */
    toString() {
      return "WindowProperty(window: " + this.window + ", property: " + this.property + ", value: " + this.value + ")";
    }

  }
  ,

  SetSlot: class extends Packet {

    static get ID(){ return 23; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 23;
    }

    constructor(window=0, slot=0, item=new Types.Slot()) {
      super();
      this.window = window;
      this.slot = slot;
      this.item = item;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeByte(this.window);
      this.writeBigEndianShort(this.slot);
      this.writeBytes(this.item.encodeBody(true));
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.window=this.readByte();
      traceDecode('window');
      this.slot=this.readBigEndianShort();
      traceDecode('slot');
      this.item=new Types.Slot().decodeBody(this._buffer);
      this._buffer=this.item._buffer;
      traceDecode('item');
      return this;
    }

    /** @return {string} */
    toString() {
      return "SetSlot(window: " + this.window + ", slot: " + this.slot + ", item: " + this.item + ")";
    }

  }
  ,

  SetCooldown: class extends Packet {

    static get ID(){ return 24; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 24;
    }

    constructor(item=0, cooldown=0) {
      super();
      this.item = item;
      this.cooldown = cooldown;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.item);
      this.writeVaruint(this.cooldown);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.item=this.readVaruint();
      traceDecode('item');
      this.cooldown=this.readVaruint();
      traceDecode('cooldown');
      return this;
    }

    /** @return {string} */
    toString() {
      return "SetCooldown(item: " + this.item + ", cooldown: " + this.cooldown + ")";
    }

  }
  ,

  PluginMessage: class extends Packet {

    static get ID(){ return 25; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 25;
    }

    constructor(channel="", data=new Types.Bytes()) {
      super();
      this.channel = channel;
      this.data = data;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      var dhc5afbv=this.encodeString(this.channel);
      this.writeVaruint(dhc5afbv.length);
      this.writeBytes(dhc5afbv);
      this.writeBytes(this.data);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      var dhc5afbv=this.readVaruint();
      this.channel=this.decodeString(this.readBytes(dhc5afbv));
      traceDecode('channel');
      this.data=Array.from(this._buffer);
      this._buffer=[];
      traceDecode('data');
      return this;
    }

    /** @return {string} */
    toString() {
      return "PluginMessage(channel: " + this.channel + ", data: " + this.data + ")";
    }

  }
  ,

  NamedSoundEffect: class extends Packet {

    static get ID(){ return 26; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 26;
    }

    constructor(name="", category=0, position={x:0,y:0,z:0}, volume=.0, pitch=.0) {
      super();
      this.name = name;
      this.category = category;
      this.position = position;
      this.volume = volume;
      this.pitch = pitch;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      var dhc5y1=this.encodeString(this.name);
      this.writeVaruint(dhc5y1.length);
      this.writeBytes(dhc5y1);
      this.writeVaruint(this.category);
      this.writeBigEndianInt(this.position.x);
      this.writeBigEndianInt(this.position.y);
      this.writeBigEndianInt(this.position.z);
      this.writeBigEndianFloat(this.volume);
      this.writeBigEndianFloat(this.pitch);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      var dhc5y1=this.readVaruint();
      this.name=this.decodeString(this.readBytes(dhc5y1));
      traceDecode('name');
      this.category=this.readVaruint();
      traceDecode('category');
      this.position={};
      this.position.x=this.readBigEndianInt();
      this.position.y=this.readBigEndianInt();
      this.position.z=this.readBigEndianInt();
      traceDecode('position');
      this.volume=this.readBigEndianFloat();
      traceDecode('volume');
      this.pitch=this.readBigEndianFloat();
      traceDecode('pitch');
      return this;
    }

    /** @return {string} */
    toString() {
      return "NamedSoundEffect(name: " + this.name + ", category: " + this.category + ", position: " + this.position + ", volume: " + this.volume + ", pitch: " + this.pitch + ")";
    }

  }
  ,

  Disconnect: class extends Packet {

    static get ID(){ return 27; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 27;
    }

    constructor(reason="") {
      super();
      this.reason = reason;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      var dhc5zfb4=this.encodeString(this.reason);
      this.writeVaruint(dhc5zfb4.length);
      this.writeBytes(dhc5zfb4);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      var dhc5zfb4=this.readVaruint();
      this.reason=this.decodeString(this.readBytes(dhc5zfb4));
      traceDecode('reason');
      return this;
    }

    /** @return {string} */
    toString() {
      return "Disconnect(reason: " + this.reason + ")";
    }

  }
  ,

  EntityStatus: class extends Packet {

    static get ID(){ return 28; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 28;
    }

    // status
    static get SPAWN_TIPPED_ARROW_PARTICLE_EFFECTS(){ return 0; };
    static get PLAY_JUMPING_ANIMATION_AND_PARTICLES(){ return 1; };
    static get RESET_SPAWNER_DELAY(){ return 1; };
    static get PLAY_HURT_ANIMATION_AND_SOUND(){ return 2; };
    static get PLAY_DEATH_ANIMATION_AND_SOUND(){ return 3; };
    static get PLAY_ATTACK_ANIMATION_AND_SOUND(){ return 4; };
    static get SPAWN_SMOKE_PARTICLES(){ return 6; };
    static get SPAWN_HEART_PARTICLES(){ return 7; };
    static get PLAY_SHAKING_WATER_ANIMATION(){ return 8; };
    static get FINISHED_CONSUMING(){ return 9; };
    static get PLAY_EATING_GRASS_ANIMATION(){ return 10; };
    static get IGNITE_MINECART_TNT(){ return 10; };
    static get HOLD_POPPY(){ return 11; };
    static get SPAWN_VILLAGER_MATING_HEART_PARTICLES(){ return 12; };
    static get SPAWN_VILLAGER_ANGRY_PARTICLES(){ return 13; };
    static get SPAWN_VILLAGER_HAPPY_PARTICLES(){ return 14; };
    static get SPAWN_WITCH_MAGIC_PARTICLES(){ return 15; };
    static get PLAY_ZOMBIE_CURE_FINISHED_SOUND(){ return 16; };
    static get SPAWN_FIREWORK_EXPLOSION_EFFECT(){ return 17; };
    static get SPAWN_LOVE_PARTICLES(){ return 18; };
    static get RESET_SQUID_ROTATION(){ return 19; };
    static get SPAWN_EXPLOSION_PARTICLES(){ return 20; };
    static get PLAY_GUARDIAN_SOUND_EFFECT(){ return 21; };
    static get ENABLE_REDUCED_DEBUG_SCREEN(){ return 22; };
    static get DISABLE_REDUCED_DEBUG_SCREEN(){ return 23; };
    static get SET_OP_PERMISSION_LEVEL_0(){ return 24; };
    static get SET_OP_PERMISSION_LEVEL_1(){ return 25; };
    static get SET_OP_PERMISSION_LEVEL_2(){ return 26; };
    static get SET_OP_PERMISSION_LEVEL_3(){ return 27; };
    static get SET_OP_PERMISSION_LEVEL_4(){ return 28; };
    static get PLAY_SHIELD_BLOCK_SOUND(){ return 29; };
    static get PLAY_SHIELD_BREAK_SOUND(){ return 30; };
    static get HOOK_KNOCKBACK(){ return 31; };
    static get PLAY_HIT_SOUND(){ return 32; };
    static get PLAY_THORNS_HURT_ANIMATION_AND_SOUND(){ return 33; };
    static get REMOVE_POPPY(){ return 34; };
    static get PLAY_TOTEM_UNDYING_ANIMATION(){ return 35; };

    constructor(entityId=0, status=0) {
      super();
      this.entityId = entityId;
      this.status = status;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeBigEndianInt(this.entityId);
      this.writeByte(this.status);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.entityId=this.readBigEndianInt();
      traceDecode('entityId');
      this.status=this.readByte();
      traceDecode('status');
      return this;
    }

    /** @return {string} */
    toString() {
      return "EntityStatus(entityId: " + this.entityId + ", status: " + this.status + ")";
    }

  }
  ,

  NbtQueryResponse: class extends Packet {

    static get ID(){ return 29; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 29;
    }

    constructor(transactionId=0, nbt=new Types.Bytes()) {
      super();
      this.transactionId = transactionId;
      this.nbt = nbt;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.transactionId);
      this.writeBytes(this.nbt);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.transactionId=this.readVaruint();
      traceDecode('transactionId');
      this.nbt=Array.from(this._buffer);
      this._buffer=[];
      traceDecode('nbt');
      return this;
    }

    /** @return {string} */
    toString() {
      return "NbtQueryResponse(transactionId: " + this.transactionId + ", nbt: " + this.nbt + ")";
    }

  }
  ,

  Explosion: class extends Packet {

    static get ID(){ return 30; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 30;
    }

    constructor(position={x:0,y:0,z:0}, radius=.0, records=[], motion={x:0,y:0,z:0}) {
      super();
      this.position = position;
      this.radius = radius;
      this.records = records;
      this.motion = motion;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeBigEndianFloat(this.position.x);
      this.writeBigEndianFloat(this.position.y);
      this.writeBigEndianFloat(this.position.z);
      this.writeBigEndianFloat(this.radius);
      this.writeBigEndianInt(this.records.length);
      for(var dhc5zncr in this.records) {
        this.writeByte(this.records[dhc5zncr].x);
        this.writeByte(this.records[dhc5zncr].y);
        this.writeByte(this.records[dhc5zncr].z);
      }
      this.writeBigEndianFloat(this.motion.x);
      this.writeBigEndianFloat(this.motion.y);
      this.writeBigEndianFloat(this.motion.z);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.position={};
      this.position.x=this.readBigEndianFloat();
      this.position.y=this.readBigEndianFloat();
      this.position.z=this.readBigEndianFloat();
      traceDecode('position');
      this.radius=this.readBigEndianFloat();
      traceDecode('radius');
      var aramcvbj=this.readBigEndianInt();
      this.records=[];
      for(var dhc5zncr=0;dhc5zncr<aramcvbj;dhc5zncr++) {
        this.records[dhc5zncr]={};
        this.records[dhc5zncr].x=this.readByte();
        this.records[dhc5zncr].y=this.readByte();
        this.records[dhc5zncr].z=this.readByte();
      }
      traceDecode('records');
      this.motion={};
      this.motion.x=this.readBigEndianFloat();
      this.motion.y=this.readBigEndianFloat();
      this.motion.z=this.readBigEndianFloat();
      traceDecode('motion');
      return this;
    }

    /** @return {string} */
    toString() {
      return "Explosion(position: " + this.position + ", radius: " + this.radius + ", records: " + this.records + ", motion: " + this.motion + ")";
    }

  }
  ,

  UnloadChunk: class extends Packet {

    static get ID(){ return 31; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 31;
    }

    constructor(position={x:0,z:0}) {
      super();
      this.position = position;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeBigEndianInt(this.position.x);
      this.writeBigEndianInt(this.position.z);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.position={};
      this.position.x=this.readBigEndianInt();
      this.position.z=this.readBigEndianInt();
      traceDecode('position');
      return this;
    }

    /** @return {string} */
    toString() {
      return "UnloadChunk(position: " + this.position + ")";
    }

  }
  ,

  ChangeGameState: class extends Packet {

    static get ID(){ return 32; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 32;
    }

    // reason
    static get INVALID_BED(){ return 0; };
    static get END_RAINING(){ return 1; };
    static get BEGIN_RAINING(){ return 2; };
    static get CHANGE_GAMEMODE(){ return 3; };
    static get EXIT_END(){ return 4; };
    static get DEMO_MESSAGE(){ return 5; };
    static get ARROW_HITTING_PLAYER(){ return 6; };
    static get FADE_VALUE(){ return 7; };
    static get FADE_TIME(){ return 8; };
    static get PLAY_ELDER_GUARDIAN_MOB_APPEARANCE(){ return 10; };

    // value
    static get SURVIVAL(){ return 0; };
    static get CREATIVE(){ return 1; };
    static get ADVENTURE(){ return 2; };
    static get SPECTATOR(){ return 3; };
    static get RESPAWN_IMMEDIATELY(){ return 0; };
    static get RESPAWN_AFTER_CREDITS(){ return 1; };
    static get SHOW_DEMO_SCREEN(){ return 0; };
    static get TELL_MOVEMENT_CONTROLS(){ return 101; };
    static get TELL_JUMP_CONTROLS(){ return 102; };
    static get TELL_INVENTORY_CONTROLS(){ return 103; };
    static get BRIGHT(){ return 0; };
    static get DARK(){ return 1; };

    constructor(reason=0, value=.0) {
      super();
      this.reason = reason;
      this.value = value;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeByte(this.reason);
      this.writeBigEndianFloat(this.value);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.reason=this.readByte();
      traceDecode('reason');
      this.value=this.readBigEndianFloat();
      traceDecode('value');
      return this;
    }

    /** @return {string} */
    toString() {
      return "ChangeGameState(reason: " + this.reason + ", value: " + this.value + ")";
    }

  }
  ,

  KeepAlive: class extends Packet {

    static get ID(){ return 33; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 33;
    }

    constructor(id=0) {
      super();
      this.id = id;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeBigEndianLong(this.id);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.id=this.readBigEndianLong();
      traceDecode('id');
      return this;
    }

    /** @return {string} */
    toString() {
      return "KeepAlive(id: " + this.id + ")";
    }

  }
  ,

  ChunkData: class extends Packet {

    static get ID(){ return 34; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 34;
    }

    constructor(position={x:0,z:0}, full=false, sections=0, data=new Uint8Array(0), tilesCount=0, tiles=new Types.Bytes()) {
      super();
      this.position = position;
      this.full = full;
      this.sections = sections;
      this.data = data;
      this.tilesCount = tilesCount;
      this.tiles = tiles;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeBigEndianInt(this.position.x);
      this.writeBigEndianInt(this.position.z);
      this.writeBool(this.full);
      this.writeVaruint(this.sections);
      this.writeVaruint(this.data.length);
      this.writeBytes(this.data);
      this.writeVaruint(this.tilesCount);
      this.writeBytes(this.tiles);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.position={};
      this.position.x=this.readBigEndianInt();
      this.position.z=this.readBigEndianInt();
      traceDecode('position');
      this.full=this.readBool();
      traceDecode('full');
      this.sections=this.readVaruint();
      traceDecode('sections');
      var aramzfy=this.readVaruint();
      this.data=this.readBytes(aramzfy);
      traceDecode('data');
      this.tilesCount=this.readVaruint();
      traceDecode('tilesCount');
      this.tiles=Array.from(this._buffer);
      this._buffer=[];
      traceDecode('tiles');
      return this;
    }

    /** @return {string} */
    toString() {
      return "ChunkData(position: " + this.position + ", full: " + this.full + ", sections: " + this.sections + ", data: " + this.data + ", tilesCount: " + this.tilesCount + ", tiles: " + this.tiles + ")";
    }

  }
  ,

  Effect: class extends Packet {

    static get ID(){ return 35; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 35;
    }

    // effect id
    static get DISPENSER_DISPENSE(){ return 1000; };
    static get DISPENSER_FAIL_DISPENSE(){ return 1001; };
    static get DISPENSER_SHOOT(){ return 1002; };
    static get ENDER_EYE_LAUNCH(){ return 1003; };
    static get FIREWORK_SHOT(){ return 1004; };
    static get IRON_DOOR_OPEN(){ return 1005; };
    static get WOODEN_DOOR_OPEN(){ return 1006; };
    static get WOODEN_TRAPDOOR_OPEN(){ return 1007; };
    static get FENCE_GATE_OPEN(){ return 1008; };
    static get FIRE_EXTINGUISH(){ return 1009; };
    static get PLAY_RECORD(){ return 1010; };
    static get IRON_DOOR_CLOSE(){ return 1011; };
    static get WOODEN_DOOR_CLOSE(){ return 1012; };
    static get WOODEN_TRAPDOOR_CLOSE(){ return 1013; };
    static get FENCE_GATE_CLOSE(){ return 1014; };
    static get GHAST_WARN(){ return 1015; };
    static get GHAST_SHOOT(){ return 1016; };
    static get ENDERDRAGON_SHOOT(){ return 1017; };
    static get BLAZE_SHOOT(){ return 1018; };
    static get ZOMBIE_ATTACK_WOOD_DOOR(){ return 1019; };
    static get ZOMBIE_ATTACK_IRON_DOOR(){ return 1020; };
    static get ZOMBIE_BREAK_WOOD_DOOR(){ return 1021; };
    static get WITHER_BREAK_BLOCK(){ return 1022; };
    static get WITHER_SPAWN(){ return 1023; };
    static get WITHER_SHOOT(){ return 1024; };
    static get BAT_TAKE_OFF(){ return 1025; };
    static get ZOMBIE_INFECT_VILLAGER(){ return 1026; };
    static get ZOMBIE_VILLAGER_CONVERT(){ return 1027; };
    static get ENDER_DRAGON_BREATH(){ return 1028; };
    static get ANVIL_BREAK(){ return 1029; };
    static get ANVIL_USE(){ return 1030; };
    static get ANVIL_LAND(){ return 1031; };
    static get PORTAL_TRAVEL(){ return 1032; };
    static get CHORUS_FLOWER_GROW(){ return 1033; };
    static get CHORUS_FLOWER_DIE(){ return 1034; };
    static get BREWING_STAND_BREW(){ return 1035; };
    static get IRON_TRAPDOOR_OPEN(){ return 1036; };
    static get IRON_TRAPDOOR_CLOSE(){ return 1037; };
    static get SPAWN_10_SMOKE_PARTICLES(){ return 2000; };
    static get BREAK_BREAK_PARTICLES_AND_SOUND(){ return 2001; };
    static get SPLASH_POTION_PARTICLES_AND_SOUND(){ return 2002; };
    static get ENDER_EYE_BREAK_PARTICLES_AND_SOUND(){ return 2003; };
    static get MOB_SPAWN_PARTICLES(){ return 2004; };
    static get BONEMEAL_PARTICLES(){ return 2005; };
    static get DRAGON_BREATH(){ return 2006; };
    static get END_GATEWAY_SPAWN(){ return 3000; };
    static get ENDERDRAGON_GROWL(){ return 3001; };

    constructor(effectId=0, position=0, data=0, disableVolume=false) {
      super();
      this.effectId = effectId;
      this.position = position;
      this.data = data;
      this.disableVolume = disableVolume;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeBigEndianInt(this.effectId);
      this.writeBigEndianLong(this.position);
      this.writeBigEndianInt(this.data);
      this.writeBool(this.disableVolume);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.effectId=this.readBigEndianInt();
      traceDecode('effectId');
      this.position=this.readBigEndianLong();
      traceDecode('position');
      this.data=this.readBigEndianInt();
      traceDecode('data');
      this.disableVolume=this.readBool();
      traceDecode('disableVolume');
      return this;
    }

    /** @return {string} */
    toString() {
      return "Effect(effectId: " + this.effectId + ", position: " + this.position + ", data: " + this.data + ", disableVolume: " + this.disableVolume + ")";
    }

  }
  ,

  SpawnParticle: class extends Packet {

    static get ID(){ return 36; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 36;
    }

    // particle id
    static get EXPLODE(){ return 0; };
    static get LARGE_EXPLOSION(){ return 1; };
    static get HUGE_EXPLOSION(){ return 2; };
    static get FIREWORK_SPARK(){ return 3; };
    static get BUBBLE(){ return 4; };
    static get SPLASH(){ return 5; };
    static get WAKE(){ return 6; };
    static get SUSPENDED(){ return 7; };
    static get DEPTH_SUSPEND(){ return 8; };
    static get CRIT(){ return 9; };
    static get MAGIC_CRIT(){ return 10; };
    static get SMOKE(){ return 11; };
    static get LARGE_SMOKE(){ return 12; };
    static get SPELL(){ return 13; };
    static get INSTANT_SPELL(){ return 14; };
    static get MOB_SPELL(){ return 15; };
    static get MOB_SPELL_AMBIENT(){ return 16; };
    static get WITCH_MAGIC(){ return 17; };
    static get DRIP_WATER(){ return 18; };
    static get DRIP_LAVA(){ return 19; };
    static get ANGRY_VILLAGER(){ return 20; };
    static get HAPPY_VILLAGER(){ return 21; };
    static get TOWN_AURA(){ return 22; };
    static get NOTE(){ return 23; };
    static get PORTAL(){ return 24; };
    static get ENCHANTMENT_TABLE(){ return 25; };
    static get FLAME(){ return 26; };
    static get LAVA(){ return 27; };
    static get FOOTSTEP(){ return 28; };
    static get CLOUD(){ return 29; };
    static get RED_DUST(){ return 30; };
    static get SNOWBALL_POOF(){ return 31; };
    static get SNOW_SHOVEL(){ return 32; };
    static get SLIME(){ return 33; };
    static get HEART(){ return 34; };
    static get BARRIER(){ return 35; };
    static get ITEM_CRACK(){ return 36; };
    static get BLOCK_CRACK(){ return 37; };
    static get BLOCK_DUST(){ return 38; };
    static get DROPLET(){ return 39; };
    static get TAKE(){ return 40; };
    static get MOB_APPEARANCE(){ return 41; };
    static get DRAGON_BREATH(){ return 42; };
    static get ENDROD(){ return 43; };
    static get DAMAGE_INDICATOR(){ return 44; };
    static get SWEEP_ATTACK(){ return 45; };
    static get FALLING_DUST(){ return 46; };

    constructor(particleId=0, longDistance=false, position={x:0,y:0,z:0}, offset={x:0,y:0,z:0}, data=.0, count=0, additionalData=new Types.Bytes()) {
      super();
      this.particleId = particleId;
      this.longDistance = longDistance;
      this.position = position;
      this.offset = offset;
      this.data = data;
      this.count = count;
      this.additionalData = additionalData;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeBigEndianInt(this.particleId);
      this.writeBool(this.longDistance);
      this.writeBigEndianFloat(this.position.x);
      this.writeBigEndianFloat(this.position.y);
      this.writeBigEndianFloat(this.position.z);
      this.writeBigEndianFloat(this.offset.x);
      this.writeBigEndianFloat(this.offset.y);
      this.writeBigEndianFloat(this.offset.z);
      this.writeBigEndianFloat(this.data);
      this.writeBigEndianInt(this.count);
      this.writeBytes(this.additionalData);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.particleId=this.readBigEndianInt();
      traceDecode('particleId');
      this.longDistance=this.readBool();
      traceDecode('longDistance');
      this.position={};
      this.position.x=this.readBigEndianFloat();
      this.position.y=this.readBigEndianFloat();
      this.position.z=this.readBigEndianFloat();
      traceDecode('position');
      this.offset={};
      this.offset.x=this.readBigEndianFloat();
      this.offset.y=this.readBigEndianFloat();
      this.offset.z=this.readBigEndianFloat();
      traceDecode('offset');
      this.data=this.readBigEndianFloat();
      traceDecode('data');
      this.count=this.readBigEndianInt();
      traceDecode('count');
      this.additionalData=Array.from(this._buffer);
      this._buffer=[];
      traceDecode('additionalData');
      return this;
    }

    /** @return {string} */
    toString() {
      return "SpawnParticle(particleId: " + this.particleId + ", longDistance: " + this.longDistance + ", position: " + this.position + ", offset: " + this.offset + ", data: " + this.data + ", count: " + this.count + ", additionalData: " + this.additionalData + ")";
    }

  }
  ,

  JoinGame: class extends Packet {

    static get ID(){ return 37; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 37;
    }

    // gamemode
    static get SURVIVAL(){ return 0; };
    static get CREATIVE(){ return 1; };
    static get ADVENTURE(){ return 2; };
    static get SPECTATOR(){ return 3; };

    // dimension
    static get NETHER(){ return -1; };
    static get OVERWORLD(){ return 0; };
    static get END(){ return 1; };

    // difficulty
    static get PEACEFUL(){ return 0; };
    static get EASY(){ return 1; };
    static get NORMAL(){ return 2; };
    static get HARD(){ return 3; };

    // level type
    static get INFINITY(){ return default; };
    static get FLAT(){ return flat; };
    static get AMPLIFIED(){ return amplified; };
    static get LARGE_BIOMES(){ return largeBiomes; };

    constructor(entityId=0, gamemode=0, dimension=0, difficulty=0, maxPlayers=0, levelType="", reducedDebug=false) {
      super();
      this.entityId = entityId;
      this.gamemode = gamemode;
      this.dimension = dimension;
      this.difficulty = difficulty;
      this.maxPlayers = maxPlayers;
      this.levelType = levelType;
      this.reducedDebug = reducedDebug;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeBigEndianInt(this.entityId);
      this.writeByte(this.gamemode);
      this.writeBigEndianInt(this.dimension);
      this.writeByte(this.difficulty);
      this.writeByte(this.maxPlayers);
      var dhc5zzbr=this.encodeString(this.levelType);
      this.writeVaruint(dhc5zzbr.length);
      this.writeBytes(dhc5zzbr);
      this.writeBool(this.reducedDebug);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.entityId=this.readBigEndianInt();
      traceDecode('entityId');
      this.gamemode=this.readByte();
      traceDecode('gamemode');
      this.dimension=this.readBigEndianInt();
      traceDecode('dimension');
      this.difficulty=this.readByte();
      traceDecode('difficulty');
      this.maxPlayers=this.readByte();
      traceDecode('maxPlayers');
      var dhc5zzbr=this.readVaruint();
      this.levelType=this.decodeString(this.readBytes(dhc5zzbr));
      traceDecode('levelType');
      this.reducedDebug=this.readBool();
      traceDecode('reducedDebug');
      return this;
    }

    /** @return {string} */
    toString() {
      return "JoinGame(entityId: " + this.entityId + ", gamemode: " + this.gamemode + ", dimension: " + this.dimension + ", difficulty: " + this.difficulty + ", maxPlayers: " + this.maxPlayers + ", levelType: " + this.levelType + ", reducedDebug: " + this.reducedDebug + ")";
    }

  }
  ,

  Map: class extends Packet {

    static get ID(){ return 38; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 38;
    }

    constructor(mapId=0, scale=0, showIcons=false, icons=[], colums=0, rows=0, offset={x:0,z:0}, data=new Uint8Array(0)) {
      super();
      this.mapId = mapId;
      this.scale = scale;
      this.showIcons = showIcons;
      this.icons = icons;
      this.colums = colums;
      this.rows = rows;
      this.offset = offset;
      this.data = data;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.mapId);
      this.writeByte(this.scale);
      this.writeBool(this.showIcons);
      this.writeVaruint(this.icons.length);
      for(var dhc5y9c in this.icons) {
        this.writeBytes(this.icons[dhc5y9c].encodeBody(true));
      }
      this.writeByte(this.colums);
      this.writeByte(this.rows);
      this.writeByte(this.offset.x);
      this.writeByte(this.offset.z);
      this.writeVaruint(this.data.length);
      this.writeBytes(this.data);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.mapId=this.readVaruint();
      traceDecode('mapId');
      this.scale=this.readByte();
      traceDecode('scale');
      this.showIcons=this.readBool();
      traceDecode('showIcons');
      var aramanbm=this.readVaruint();
      this.icons=[];
      for(var dhc5y9c=0;dhc5y9c<aramanbm;dhc5y9c++) {
        this.icons[dhc5y9c]=new Types.Icon().decodeBody(this._buffer);
        this._buffer=this.icons[dhc5y9c]._buffer;
      }
      traceDecode('icons');
      this.colums=this.readByte();
      traceDecode('colums');
      this.rows=this.readByte();
      traceDecode('rows');
      this.offset={};
      this.offset.x=this.readByte();
      this.offset.z=this.readByte();
      traceDecode('offset');
      var aramzfy=this.readVaruint();
      this.data=this.readBytes(aramzfy);
      traceDecode('data');
      return this;
    }

    /** @return {string} */
    toString() {
      return "Map(mapId: " + this.mapId + ", scale: " + this.scale + ", showIcons: " + this.showIcons + ", icons: " + this.icons + ", colums: " + this.colums + ", rows: " + this.rows + ", offset: " + this.offset + ", data: " + this.data + ")";
    }

  }
  ,

  Entity: class extends Packet {

    static get ID(){ return 39; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 39;
    }

    constructor(entityId=0) {
      super();
      this.entityId = entityId;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.entityId);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.entityId=this.readVaruint();
      traceDecode('entityId');
      return this;
    }

    /** @return {string} */
    toString() {
      return "Entity(entityId: " + this.entityId + ")";
    }

  }
  ,

  EntityRelativeMove: class extends Packet {

    static get ID(){ return 40; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 40;
    }

    constructor(entityId=0, delta={x:0,y:0,z:0}, onGround=false) {
      super();
      this.entityId = entityId;
      this.delta = delta;
      this.onGround = onGround;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.entityId);
      this.writeBigEndianShort(this.delta.x);
      this.writeBigEndianShort(this.delta.y);
      this.writeBigEndianShort(this.delta.z);
      this.writeBool(this.onGround);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.entityId=this.readVaruint();
      traceDecode('entityId');
      this.delta={};
      this.delta.x=this.readBigEndianShort();
      this.delta.y=this.readBigEndianShort();
      this.delta.z=this.readBigEndianShort();
      traceDecode('delta');
      this.onGround=this.readBool();
      traceDecode('onGround');
      return this;
    }

    /** @return {string} */
    toString() {
      return "EntityRelativeMove(entityId: " + this.entityId + ", delta: " + this.delta + ", onGround: " + this.onGround + ")";
    }

  }
  ,

  EntityLookAndRelativeMove: class extends Packet {

    static get ID(){ return 41; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 41;
    }

    constructor(entityId=0, delta={x:0,y:0,z:0}, yaw=0, pitch=0, onGround=false) {
      super();
      this.entityId = entityId;
      this.delta = delta;
      this.yaw = yaw;
      this.pitch = pitch;
      this.onGround = onGround;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.entityId);
      this.writeBigEndianShort(this.delta.x);
      this.writeBigEndianShort(this.delta.y);
      this.writeBigEndianShort(this.delta.z);
      this.writeByte(this.yaw);
      this.writeByte(this.pitch);
      this.writeBool(this.onGround);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.entityId=this.readVaruint();
      traceDecode('entityId');
      this.delta={};
      this.delta.x=this.readBigEndianShort();
      this.delta.y=this.readBigEndianShort();
      this.delta.z=this.readBigEndianShort();
      traceDecode('delta');
      this.yaw=this.readByte();
      traceDecode('yaw');
      this.pitch=this.readByte();
      traceDecode('pitch');
      this.onGround=this.readBool();
      traceDecode('onGround');
      return this;
    }

    /** @return {string} */
    toString() {
      return "EntityLookAndRelativeMove(entityId: " + this.entityId + ", delta: " + this.delta + ", yaw: " + this.yaw + ", pitch: " + this.pitch + ", onGround: " + this.onGround + ")";
    }

  }
  ,

  EntityLook: class extends Packet {

    static get ID(){ return 42; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 42;
    }

    constructor(entityId=0, yaw=0, pitch=0, onGround=false) {
      super();
      this.entityId = entityId;
      this.yaw = yaw;
      this.pitch = pitch;
      this.onGround = onGround;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.entityId);
      this.writeByte(this.yaw);
      this.writeByte(this.pitch);
      this.writeBool(this.onGround);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.entityId=this.readVaruint();
      traceDecode('entityId');
      this.yaw=this.readByte();
      traceDecode('yaw');
      this.pitch=this.readByte();
      traceDecode('pitch');
      this.onGround=this.readBool();
      traceDecode('onGround');
      return this;
    }

    /** @return {string} */
    toString() {
      return "EntityLook(entityId: " + this.entityId + ", yaw: " + this.yaw + ", pitch: " + this.pitch + ", onGround: " + this.onGround + ")";
    }

  }
  ,

  VehicleMove: class extends Packet {

    static get ID(){ return 43; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 43;
    }

    constructor(position={x:0,y:0,z:0}, yaw=.0, pitch=.0) {
      super();
      this.position = position;
      this.yaw = yaw;
      this.pitch = pitch;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeBigEndianDouble(this.position.x);
      this.writeBigEndianDouble(this.position.y);
      this.writeBigEndianDouble(this.position.z);
      this.writeBigEndianFloat(this.yaw);
      this.writeBigEndianFloat(this.pitch);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.position={};
      this.position.x=this.readBigEndianDouble();
      this.position.y=this.readBigEndianDouble();
      this.position.z=this.readBigEndianDouble();
      traceDecode('position');
      this.yaw=this.readBigEndianFloat();
      traceDecode('yaw');
      this.pitch=this.readBigEndianFloat();
      traceDecode('pitch');
      return this;
    }

    /** @return {string} */
    toString() {
      return "VehicleMove(position: " + this.position + ", yaw: " + this.yaw + ", pitch: " + this.pitch + ")";
    }

  }
  ,

  OpenSignEditor: class extends Packet {

    static get ID(){ return 44; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 44;
    }

    constructor(position=0) {
      super();
      this.position = position;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeBigEndianLong(this.position);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.position=this.readBigEndianLong();
      traceDecode('position');
      return this;
    }

    /** @return {string} */
    toString() {
      return "OpenSignEditor(position: " + this.position + ")";
    }

  }
  ,

  CraftRecipeResponse: class extends Packet {

    static get ID(){ return 45; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 45;
    }

    constructor(window=0, recipe=0) {
      super();
      this.window = window;
      this.recipe = recipe;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeByte(this.window);
      this.writeVaruint(this.recipe);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.window=this.readByte();
      traceDecode('window');
      this.recipe=this.readVaruint();
      traceDecode('recipe');
      return this;
    }

    /** @return {string} */
    toString() {
      return "CraftRecipeResponse(window: " + this.window + ", recipe: " + this.recipe + ")";
    }

  }
  ,

  PlayerAbilities: class extends Packet {

    static get ID(){ return 46; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 46;
    }

    // flags
    static get INVULNERABLE(){ return 1; };
    static get FLYING(){ return 2; };
    static get ALLOW_FLYING(){ return 4; };
    static get CREATIVE_MODE(){ return 8; };

    constructor(flags=0, flyingSpeed=.0, fovModifier=.0) {
      super();
      this.flags = flags;
      this.flyingSpeed = flyingSpeed;
      this.fovModifier = fovModifier;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeByte(this.flags);
      this.writeBigEndianFloat(this.flyingSpeed);
      this.writeBigEndianFloat(this.fovModifier);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.flags=this.readByte();
      traceDecode('flags');
      this.flyingSpeed=this.readBigEndianFloat();
      traceDecode('flyingSpeed');
      this.fovModifier=this.readBigEndianFloat();
      traceDecode('fovModifier');
      return this;
    }

    /** @return {string} */
    toString() {
      return "PlayerAbilities(flags: " + this.flags + ", flyingSpeed: " + this.flyingSpeed + ", fovModifier: " + this.fovModifier + ")";
    }

  }
  ,

  CombatEvent: class extends Packet {

    static get ID(){ return 47; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 47;
    }

    // event id (variant)
    static get ENTER_COMBAT(){ return 0; };
    static get END_COMBAT(){ return 1; };
    static get ENTITY_DEAD(){ return 2; };

    constructor(eventId=0) {
      super();
      this.eventId = eventId;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeByte(this.eventId);
      switch(this.eventId) {
        case 0:
          this.writeByte(this.eventId);
          break;
        case 1:
          this.writeByte(this.eventId);
          break;
        case 2:
          this.writeByte(this.eventId);
          break;
        default: break;
      }
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.eventId=this.readByte();
      traceDecode('eventId');
      switch(this.eventId) {
        case 0:
          break;
        case 1:
          this.duration=this.readVaruint();
          this.entityId=this.readBigEndianInt();
          break;
        case 2:
          this.playerId=this.readVaruint();
          this.entityId=this.readBigEndianInt();
          var dhc5znyd=this.readVaruint();
          this.message=this.decodeString(this.readBytes(dhc5znyd));
          break;
        default: break;
      }
      return this;
    }

    /** @return {string} */
    toString() {
      return "CombatEvent(eventId: " + this.eventId + ")";
    }

  }
  ,

  PlayerListItem: class extends Packet {

    static get ID(){ return 48; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 48;
    }

    // action (variant)
    static get ADD_PLAYER(){ return 0; };
    static get UPDATE_GAMEMODE(){ return 1; };
    static get UPDATE_LATENCY(){ return 2; };
    static get UPDATE_DISPLAY_NAME(){ return 3; };
    static get REMOVE_PLAYER(){ return 4; };

    constructor(action=0) {
      super();
      this.action = action;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.action);
      switch(this.action) {
        case 0:
          this.writeVaruint(this.action);
          break;
        case 1:
          this.writeVaruint(this.action);
          break;
        case 2:
          this.writeVaruint(this.action);
          break;
        case 3:
          this.writeVaruint(this.action);
          break;
        case 4:
          this.writeVaruint(this.action);
          break;
        default: break;
      }
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.action=this.readVaruint();
      traceDecode('action');
      switch(this.action) {
        case 0:
          var aramcxev=this.readVaruint();
          this.players=[];
          for(var dhc5bfzj=0;dhc5bfzj<aramcxev;dhc5bfzj++) {
            this.players[dhc5bfzj]=new Types.ListAddPlayer().decodeBody(this._buffer);
            this._buffer=this.players[dhc5bfzj]._buffer;
          }
          break;
        case 1:
          var aramcxev=this.readVaruint();
          this.players=[];
          for(var dhc5bfzj=0;dhc5bfzj<aramcxev;dhc5bfzj++) {
            this.players[dhc5bfzj]=new Types.ListUpdateGamemode().decodeBody(this._buffer);
            this._buffer=this.players[dhc5bfzj]._buffer;
          }
          break;
        case 2:
          var aramcxev=this.readVaruint();
          this.players=[];
          for(var dhc5bfzj=0;dhc5bfzj<aramcxev;dhc5bfzj++) {
            this.players[dhc5bfzj]=new Types.ListUpdateLatency().decodeBody(this._buffer);
            this._buffer=this.players[dhc5bfzj]._buffer;
          }
          break;
        case 3:
          var aramcxev=this.readVaruint();
          this.players=[];
          for(var dhc5bfzj=0;dhc5bfzj<aramcxev;dhc5bfzj++) {
            this.players[dhc5bfzj]=new Types.ListUpdateDisplayName().decodeBody(this._buffer);
            this._buffer=this.players[dhc5bfzj]._buffer;
          }
          break;
        case 4:
          var aramcxev=this.readVaruint();
          this.players=[];
          for(var dhc5bfzj=0;dhc5bfzj<aramcxev;dhc5bfzj++) {
            this.players[dhc5bfzj]=this.readBytes(16);
          }
          break;
        default: break;
      }
      return this;
    }

    /** @return {string} */
    toString() {
      return "PlayerListItem(action: " + this.action + ")";
    }

  }
  ,

  FacePlayer: class extends Packet {

    static get ID(){ return 49; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 49;
    }

    // type
    static get FEET(){ return 0; };
    static get EYES(){ return 1; };

    constructor(type=0, target={x:0,y:0,z:0}, isEntity=false, entityId=0, entityType=0) {
      super();
      this.type = type;
      this.target = target;
      this.isEntity = isEntity;
      this.entityId = entityId;
      this.entityType = entityType;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.type);
      this.writeBigEndianDouble(this.target.x);
      this.writeBigEndianDouble(this.target.y);
      this.writeBigEndianDouble(this.target.z);
      this.writeBool(this.isEntity);
      if(isEntity==true) {
        this.writeVaruint(this.entityId);
      }
      if(isEntity==true) {
        this.writeVaruint(this.entityType);
      }
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.type=this.readVaruint();
      traceDecode('type');
      this.target={};
      this.target.x=this.readBigEndianDouble();
      this.target.y=this.readBigEndianDouble();
      this.target.z=this.readBigEndianDouble();
      traceDecode('target');
      this.isEntity=this.readBool();
      traceDecode('isEntity');
      if(isEntity==true) {
        this.entityId=this.readVaruint();
        traceDecode('entityId');
      }
      if(isEntity==true) {
        this.entityType=this.readVaruint();
        traceDecode('entityType');
      }
      return this;
    }

    /** @return {string} */
    toString() {
      return "FacePlayer(type: " + this.type + ", target: " + this.target + ", isEntity: " + this.isEntity + ", entityId: " + this.entityId + ", entityType: " + this.entityType + ")";
    }

  }
  ,

  PlayerPositionAndLook: class extends Packet {

    static get ID(){ return 50; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 50;
    }

    // flags
    static get X(){ return 1; };
    static get Y(){ return 2; };
    static get Z(){ return 4; };
    static get Y_ROTATION(){ return 8; };
    static get X_ROTATION(){ return 16; };

    constructor(position={x:0,y:0,z:0}, yaw=.0, pitch=.0, flags=0, teleportId=0) {
      super();
      this.position = position;
      this.yaw = yaw;
      this.pitch = pitch;
      this.flags = flags;
      this.teleportId = teleportId;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeBigEndianDouble(this.position.x);
      this.writeBigEndianDouble(this.position.y);
      this.writeBigEndianDouble(this.position.z);
      this.writeBigEndianFloat(this.yaw);
      this.writeBigEndianFloat(this.pitch);
      this.writeByte(this.flags);
      this.writeVaruint(this.teleportId);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.position={};
      this.position.x=this.readBigEndianDouble();
      this.position.y=this.readBigEndianDouble();
      this.position.z=this.readBigEndianDouble();
      traceDecode('position');
      this.yaw=this.readBigEndianFloat();
      traceDecode('yaw');
      this.pitch=this.readBigEndianFloat();
      traceDecode('pitch');
      this.flags=this.readByte();
      traceDecode('flags');
      this.teleportId=this.readVaruint();
      traceDecode('teleportId');
      return this;
    }

    /** @return {string} */
    toString() {
      return "PlayerPositionAndLook(position: " + this.position + ", yaw: " + this.yaw + ", pitch: " + this.pitch + ", flags: " + this.flags + ", teleportId: " + this.teleportId + ")";
    }

  }
  ,

  UseBed: class extends Packet {

    static get ID(){ return 51; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 51;
    }

    constructor(entityId=0, position=0) {
      super();
      this.entityId = entityId;
      this.position = position;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.entityId);
      this.writeBigEndianLong(this.position);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.entityId=this.readVaruint();
      traceDecode('entityId');
      this.position=this.readBigEndianLong();
      traceDecode('position');
      return this;
    }

    /** @return {string} */
    toString() {
      return "UseBed(entityId: " + this.entityId + ", position: " + this.position + ")";
    }

  }
  ,

  UnlockRecipes: class extends Packet {

    static get ID(){ return 52; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 52;
    }

    // action
    static get ADD(){ return 1; };
    static get REMOVE(){ return 2; };
    static get ADD_WITHOUT_NOTIFICATION(){ return 3; };

    constructor(action=0, craftingRecipeBookOpen=false, craftingRecipeBookFilterActive=false, smeltingRecipeBookOpen=false, smeltingRecipeBookFilterActive=false, recipes=new Uint32Array(0), bookRecipes=new Uint32Array(0)) {
      super();
      this.action = action;
      this.craftingRecipeBookOpen = craftingRecipeBookOpen;
      this.craftingRecipeBookFilterActive = craftingRecipeBookFilterActive;
      this.smeltingRecipeBookOpen = smeltingRecipeBookOpen;
      this.smeltingRecipeBookFilterActive = smeltingRecipeBookFilterActive;
      this.recipes = recipes;
      this.bookRecipes = bookRecipes;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.action);
      this.writeBool(this.craftingRecipeBookOpen);
      this.writeBool(this.craftingRecipeBookFilterActive);
      this.writeBool(this.smeltingRecipeBookOpen);
      this.writeBool(this.smeltingRecipeBookFilterActive);
      this.writeVaruint(this.recipes.length);
      for(var dhc5zncv in this.recipes) {
        this.writeVaruint(this.recipes[dhc5zncv]);
      }
      if(action==1||action==3) {
        this.writeVaruint(this.bookRecipes.length);
        for(var dhc5b9uv in this.bookRecipes) {
          this.writeVaruint(this.bookRecipes[dhc5b9uv]);
        }
      }
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.action=this.readVaruint();
      traceDecode('action');
      this.craftingRecipeBookOpen=this.readBool();
      traceDecode('craftingRecipeBookOpen');
      this.craftingRecipeBookFilterActive=this.readBool();
      traceDecode('craftingRecipeBookFilterActive');
      this.smeltingRecipeBookOpen=this.readBool();
      traceDecode('smeltingRecipeBookOpen');
      this.smeltingRecipeBookFilterActive=this.readBool();
      traceDecode('smeltingRecipeBookFilterActive');
      var aramcvab=this.readVaruint();
      this.recipes=[];
      for(var dhc5zncv=0;dhc5zncv<aramcvab;dhc5zncv++) {
        this.recipes[dhc5zncv]=this.readVaruint();
      }
      traceDecode('recipes');
      if(action==1||action==3) {
        var aramy9aj=this.readVaruint();
        this.bookRecipes=[];
        for(var dhc5b9uv=0;dhc5b9uv<aramy9aj;dhc5b9uv++) {
          this.bookRecipes[dhc5b9uv]=this.readVaruint();
        }
        traceDecode('bookRecipes');
      }
      return this;
    }

    /** @return {string} */
    toString() {
      return "UnlockRecipes(action: " + this.action + ", craftingRecipeBookOpen: " + this.craftingRecipeBookOpen + ", craftingRecipeBookFilterActive: " + this.craftingRecipeBookFilterActive + ", smeltingRecipeBookOpen: " + this.smeltingRecipeBookOpen + ", smeltingRecipeBookFilterActive: " + this.smeltingRecipeBookFilterActive + ", recipes: " + this.recipes + ", bookRecipes: " + this.bookRecipes + ")";
    }

  }
  ,

  DestroyEntities: class extends Packet {

    static get ID(){ return 53; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 53;
    }

    constructor(entityIds=new Uint32Array(0)) {
      super();
      this.entityIds = entityIds;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.entityIds.length);
      for(var dhc5brdl in this.entityIds) {
        this.writeVaruint(this.entityIds[dhc5brdl]);
      }
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      var aramz5ar=this.readVaruint();
      this.entityIds=[];
      for(var dhc5brdl=0;dhc5brdl<aramz5ar;dhc5brdl++) {
        this.entityIds[dhc5brdl]=this.readVaruint();
      }
      traceDecode('entityIds');
      return this;
    }

    /** @return {string} */
    toString() {
      return "DestroyEntities(entityIds: " + this.entityIds + ")";
    }

  }
  ,

  RemoveEntityEffect: class extends Packet {

    static get ID(){ return 54; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 54;
    }

    constructor(entityId=0, effectId=0) {
      super();
      this.entityId = entityId;
      this.effectId = effectId;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.entityId);
      this.writeByte(this.effectId);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.entityId=this.readVaruint();
      traceDecode('entityId');
      this.effectId=this.readByte();
      traceDecode('effectId');
      return this;
    }

    /** @return {string} */
    toString() {
      return "RemoveEntityEffect(entityId: " + this.entityId + ", effectId: " + this.effectId + ")";
    }

  }
  ,

  ResourcePackSend: class extends Packet {

    static get ID(){ return 55; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 55;
    }

    constructor(url="", hash="") {
      super();
      this.url = url;
      this.hash = hash;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      var dhc5cw=this.encodeString(this.url);
      this.writeVaruint(dhc5cw.length);
      this.writeBytes(dhc5cw);
      var dhc5yn=this.encodeString(this.hash);
      this.writeVaruint(dhc5yn.length);
      this.writeBytes(dhc5yn);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      var dhc5cw=this.readVaruint();
      this.url=this.decodeString(this.readBytes(dhc5cw));
      traceDecode('url');
      var dhc5yn=this.readVaruint();
      this.hash=this.decodeString(this.readBytes(dhc5yn));
      traceDecode('hash');
      return this;
    }

    /** @return {string} */
    toString() {
      return "ResourcePackSend(url: " + this.url + ", hash: " + this.hash + ")";
    }

  }
  ,

  Respawn: class extends Packet {

    static get ID(){ return 56; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 56;
    }

    // dimension
    static get NETHER(){ return -1; };
    static get OVERWORLD(){ return 0; };
    static get END(){ return 1; };

    // difficulty
    static get PEACEFUL(){ return 0; };
    static get EASY(){ return 1; };
    static get NORMAL(){ return 2; };
    static get HARD(){ return 3; };

    // gamemode
    static get SURVIVAL(){ return 0; };
    static get CREATIVE(){ return 1; };
    static get ADVENTURE(){ return 2; };
    static get SPECTATOR(){ return 3; };

    // level type
    static get INFINITY(){ return default; };
    static get FLAT(){ return flat; };
    static get AMPLIFIED(){ return amplified; };
    static get LARGE_BIOMES(){ return largeBiomes; };

    constructor(dimension=0, difficulty=0, gamemode=0, levelType="") {
      super();
      this.dimension = dimension;
      this.difficulty = difficulty;
      this.gamemode = gamemode;
      this.levelType = levelType;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeBigEndianInt(this.dimension);
      this.writeByte(this.difficulty);
      this.writeByte(this.gamemode);
      var dhc5zzbr=this.encodeString(this.levelType);
      this.writeVaruint(dhc5zzbr.length);
      this.writeBytes(dhc5zzbr);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.dimension=this.readBigEndianInt();
      traceDecode('dimension');
      this.difficulty=this.readByte();
      traceDecode('difficulty');
      this.gamemode=this.readByte();
      traceDecode('gamemode');
      var dhc5zzbr=this.readVaruint();
      this.levelType=this.decodeString(this.readBytes(dhc5zzbr));
      traceDecode('levelType');
      return this;
    }

    /** @return {string} */
    toString() {
      return "Respawn(dimension: " + this.dimension + ", difficulty: " + this.difficulty + ", gamemode: " + this.gamemode + ", levelType: " + this.levelType + ")";
    }

  }
  ,

  EntityHeadLook: class extends Packet {

    static get ID(){ return 57; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 57;
    }

    constructor(entityId=0, headYaw=0) {
      super();
      this.entityId = entityId;
      this.headYaw = headYaw;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.entityId);
      this.writeByte(this.headYaw);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.entityId=this.readVaruint();
      traceDecode('entityId');
      this.headYaw=this.readByte();
      traceDecode('headYaw');
      return this;
    }

    /** @return {string} */
    toString() {
      return "EntityHeadLook(entityId: " + this.entityId + ", headYaw: " + this.headYaw + ")";
    }

  }
  ,

  AdvancementProgress: class extends Packet {

    static get ID(){ return 58; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 58;
    }

    constructor(notEmpty=false, identifier="") {
      super();
      this.notEmpty = notEmpty;
      this.identifier = identifier;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeBool(this.notEmpty);
      if(notEmpty==true) {
        var dhc5zvdl=this.encodeString(this.identifier);
        this.writeVaruint(dhc5zvdl.length);
        this.writeBytes(dhc5zvdl);
      }
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.notEmpty=this.readBool();
      traceDecode('notEmpty');
      if(notEmpty==true) {
        var dhc5zvdl=this.readVaruint();
        this.identifier=this.decodeString(this.readBytes(dhc5zvdl));
        traceDecode('identifier');
      }
      return this;
    }

    /** @return {string} */
    toString() {
      return "AdvancementProgress(notEmpty: " + this.notEmpty + ", identifier: " + this.identifier + ")";
    }

  }
  ,

  WorldBorder: class extends Packet {

    static get ID(){ return 59; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 59;
    }

    // action (variant)
    static get SET_SIZE(){ return 0; };
    static get LERP_SIZE(){ return 1; };
    static get SET_CENTER(){ return 2; };
    static get INITIALIZE(){ return 3; };
    static get SET_WARNING_TIME(){ return 4; };
    static get SET_WARNING_BLOCKS(){ return 5; };

    constructor(action=0) {
      super();
      this.action = action;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.action);
      switch(this.action) {
        case 0:
          this.writeVaruint(this.action);
          break;
        case 1:
          this.writeVaruint(this.action);
          break;
        case 2:
          this.writeVaruint(this.action);
          break;
        case 3:
          this.writeVaruint(this.action);
          break;
        case 4:
          this.writeVaruint(this.action);
          break;
        case 5:
          this.writeVaruint(this.action);
          break;
        default: break;
      }
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.action=this.readVaruint();
      traceDecode('action');
      switch(this.action) {
        case 0:
          this.diameter=this.readBigEndianDouble();
          break;
        case 1:
          this.oldDiameter=this.readBigEndianDouble();
          this.newDiameter=this.readBigEndianDouble();
          this.speed=this.readVarulong();
          break;
        case 2:
          this.center={};
          this.center.x=this.readBigEndianDouble();
          this.center.y=this.readBigEndianDouble();
          this.center.z=this.readBigEndianDouble();
          break;
        case 3:
          this.center={};
          this.center.x=this.readBigEndianDouble();
          this.center.y=this.readBigEndianDouble();
          this.center.z=this.readBigEndianDouble();
          this.oldDiameter=this.readBigEndianDouble();
          this.newDiameter=this.readBigEndianDouble();
          this.speed=this.readVarulong();
          this.portalTeleportBoundary=this.readVaruint();
          this.warningTime=this.readVaruint();
          this.warningBlocks=this.readVaruint();
          break;
        case 4:
          this.warningTime=this.readVaruint();
          break;
        case 5:
          this.warningBlocks=this.readVaruint();
          break;
        default: break;
      }
      return this;
    }

    /** @return {string} */
    toString() {
      return "WorldBorder(action: " + this.action + ")";
    }

  }
  ,

  Camera: class extends Packet {

    static get ID(){ return 60; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 60;
    }

    constructor(entityId=0) {
      super();
      this.entityId = entityId;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.entityId);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.entityId=this.readVaruint();
      traceDecode('entityId');
      return this;
    }

    /** @return {string} */
    toString() {
      return "Camera(entityId: " + this.entityId + ")";
    }

  }
  ,

  HeldItemChange: class extends Packet {

    static get ID(){ return 61; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 61;
    }

    constructor(slot=0) {
      super();
      this.slot = slot;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeByte(this.slot);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.slot=this.readByte();
      traceDecode('slot');
      return this;
    }

    /** @return {string} */
    toString() {
      return "HeldItemChange(slot: " + this.slot + ")";
    }

  }
  ,

  DisplayScoreboard: class extends Packet {

    static get ID(){ return 62; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 62;
    }

    // position
    static get LIST(){ return 0; };
    static get SIDEBAR(){ return 1; };
    static get BELOW_NAME(){ return 2; };

    constructor(position=0, scoreName="") {
      super();
      this.position = position;
      this.scoreName = scoreName;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeByte(this.position);
      var dhc5y9z5=this.encodeString(this.scoreName);
      this.writeVaruint(dhc5y9z5.length);
      this.writeBytes(dhc5y9z5);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.position=this.readByte();
      traceDecode('position');
      var dhc5y9z5=this.readVaruint();
      this.scoreName=this.decodeString(this.readBytes(dhc5y9z5));
      traceDecode('scoreName');
      return this;
    }

    /** @return {string} */
    toString() {
      return "DisplayScoreboard(position: " + this.position + ", scoreName: " + this.scoreName + ")";
    }

  }
  ,

  EntityMetadata: class extends Packet {

    static get ID(){ return 63; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 63;
    }

    constructor(entityId=0, metadata=new Metadata()) {
      super();
      this.entityId = entityId;
      this.metadata = metadata;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.entityId);
      this.writeBytes(this.metadata.encodeBody(true));
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.entityId=this.readVaruint();
      traceDecode('entityId');
      this.metadata=new Metadata().decodeBody(this._buffer);
      this._buffer=this.metadata._buffer;
      traceDecode('metadata');
      return this;
    }

    /** @return {string} */
    toString() {
      return "EntityMetadata(entityId: " + this.entityId + ", metadata: " + this.metadata + ")";
    }

  }
  ,

  AttachEntity: class extends Packet {

    static get ID(){ return 64; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 64;
    }

    constructor(target=0, holder=0) {
      super();
      this.target = target;
      this.holder = holder;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeBigEndianInt(this.target);
      this.writeBigEndianInt(this.holder);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.target=this.readBigEndianInt();
      traceDecode('target');
      this.holder=this.readBigEndianInt();
      traceDecode('holder');
      return this;
    }

    /** @return {string} */
    toString() {
      return "AttachEntity(target: " + this.target + ", holder: " + this.holder + ")";
    }

  }
  ,

  EntityVelocity: class extends Packet {

    static get ID(){ return 65; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 65;
    }

    constructor(entityId=0, velocity={x:0,y:0,z:0}) {
      super();
      this.entityId = entityId;
      this.velocity = velocity;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.entityId);
      this.writeBigEndianShort(this.velocity.x);
      this.writeBigEndianShort(this.velocity.y);
      this.writeBigEndianShort(this.velocity.z);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.entityId=this.readVaruint();
      traceDecode('entityId');
      this.velocity={};
      this.velocity.x=this.readBigEndianShort();
      this.velocity.y=this.readBigEndianShort();
      this.velocity.z=this.readBigEndianShort();
      traceDecode('velocity');
      return this;
    }

    /** @return {string} */
    toString() {
      return "EntityVelocity(entityId: " + this.entityId + ", velocity: " + this.velocity + ")";
    }

  }
  ,

  EntityEquipment: class extends Packet {

    static get ID(){ return 66; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 66;
    }

    constructor(entityId=0, slot=0, item=new Types.Slot()) {
      super();
      this.entityId = entityId;
      this.slot = slot;
      this.item = item;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.entityId);
      this.writeVaruint(this.slot);
      this.writeBytes(this.item.encodeBody(true));
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.entityId=this.readVaruint();
      traceDecode('entityId');
      this.slot=this.readVaruint();
      traceDecode('slot');
      this.item=new Types.Slot().decodeBody(this._buffer);
      this._buffer=this.item._buffer;
      traceDecode('item');
      return this;
    }

    /** @return {string} */
    toString() {
      return "EntityEquipment(entityId: " + this.entityId + ", slot: " + this.slot + ", item: " + this.item + ")";
    }

  }
  ,

  SetExperience: class extends Packet {

    static get ID(){ return 67; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 67;
    }

    constructor(experience=.0, level=0, totalExperience=0) {
      super();
      this.experience = experience;
      this.level = level;
      this.totalExperience = totalExperience;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeBigEndianFloat(this.experience);
      this.writeVaruint(this.level);
      this.writeVaruint(this.totalExperience);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.experience=this.readBigEndianFloat();
      traceDecode('experience');
      this.level=this.readVaruint();
      traceDecode('level');
      this.totalExperience=this.readVaruint();
      traceDecode('totalExperience');
      return this;
    }

    /** @return {string} */
    toString() {
      return "SetExperience(experience: " + this.experience + ", level: " + this.level + ", totalExperience: " + this.totalExperience + ")";
    }

  }
  ,

  UpdateHealth: class extends Packet {

    static get ID(){ return 68; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 68;
    }

    constructor(health=.0, hunger=0, saturation=.0) {
      super();
      this.health = health;
      this.hunger = hunger;
      this.saturation = saturation;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeBigEndianFloat(this.health);
      this.writeVaruint(this.hunger);
      this.writeBigEndianFloat(this.saturation);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.health=this.readBigEndianFloat();
      traceDecode('health');
      this.hunger=this.readVaruint();
      traceDecode('hunger');
      this.saturation=this.readBigEndianFloat();
      traceDecode('saturation');
      return this;
    }

    /** @return {string} */
    toString() {
      return "UpdateHealth(health: " + this.health + ", hunger: " + this.hunger + ", saturation: " + this.saturation + ")";
    }

  }
  ,

  ScoreboardObjective: class extends Packet {

    static get ID(){ return 69; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 69;
    }

    // mode
    static get CREATE(){ return 0; };
    static get REMOVE(){ return 1; };
    static get UPDATE(){ return 2; };

    constructor(name="", mode=0, value="", type=0) {
      super();
      this.name = name;
      this.mode = mode;
      this.value = value;
      this.type = type;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      var dhc5y1=this.encodeString(this.name);
      this.writeVaruint(dhc5y1.length);
      this.writeBytes(dhc5y1);
      this.writeByte(this.mode);
      if(mode!=1) {
        var dhc5yxz=this.encodeString(this.value);
        this.writeVaruint(dhc5yxz.length);
        this.writeBytes(dhc5yxz);
      }
      if(mode!=1) {
        this.writeVaruint(this.type);
      }
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      var dhc5y1=this.readVaruint();
      this.name=this.decodeString(this.readBytes(dhc5y1));
      traceDecode('name');
      this.mode=this.readByte();
      traceDecode('mode');
      if(mode!=1) {
        var dhc5yxz=this.readVaruint();
        this.value=this.decodeString(this.readBytes(dhc5yxz));
        traceDecode('value');
      }
      if(mode!=1) {
        this.type=this.readVaruint();
        traceDecode('type');
      }
      return this;
    }

    /** @return {string} */
    toString() {
      return "ScoreboardObjective(name: " + this.name + ", mode: " + this.mode + ", value: " + this.value + ", type: " + this.type + ")";
    }

  }
  ,

  SetPassengers: class extends Packet {

    static get ID(){ return 70; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 70;
    }

    constructor(entityId=0, passengers=new Uint32Array(0)) {
      super();
      this.entityId = entityId;
      this.passengers = passengers;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.entityId);
      this.writeVaruint(this.passengers.length);
      for(var dhc5ynz5 in this.passengers) {
        this.writeVaruint(this.passengers[dhc5ynz5]);
      }
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.entityId=this.readVaruint();
      traceDecode('entityId');
      var aramcfcv=this.readVaruint();
      this.passengers=[];
      for(var dhc5ynz5=0;dhc5ynz5<aramcfcv;dhc5ynz5++) {
        this.passengers[dhc5ynz5]=this.readVaruint();
      }
      traceDecode('passengers');
      return this;
    }

    /** @return {string} */
    toString() {
      return "SetPassengers(entityId: " + this.entityId + ", passengers: " + this.passengers + ")";
    }

  }
  ,

  Teams: class extends Packet {

    static get ID(){ return 71; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 71;
    }

    // mode (variant)
    static get CREATE_TEAM(){ return 0; };
    static get REMOVE_TEAM(){ return 1; };
    static get UPDATE_TEAM_INFO(){ return 2; };
    static get ADD_PLAYERS(){ return 3; };
    static get REMOVE_PLAYERS(){ return 4; };

    constructor(name="", mode=0) {
      super();
      this.name = name;
      this.mode = mode;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      var dhc5y1=this.encodeString(this.name);
      this.writeVaruint(dhc5y1.length);
      this.writeBytes(dhc5y1);
      this.writeByte(this.mode);
      switch(this.mode) {
        case 0:
          var dhc5y1=this.encodeString(this.name);
          this.writeVaruint(dhc5y1.length);
          this.writeBytes(dhc5y1);
          this.writeByte(this.mode);
          break;
        case 1:
          var dhc5y1=this.encodeString(this.name);
          this.writeVaruint(dhc5y1.length);
          this.writeBytes(dhc5y1);
          this.writeByte(this.mode);
          break;
        case 2:
          var dhc5y1=this.encodeString(this.name);
          this.writeVaruint(dhc5y1.length);
          this.writeBytes(dhc5y1);
          this.writeByte(this.mode);
          break;
        case 3:
          var dhc5y1=this.encodeString(this.name);
          this.writeVaruint(dhc5y1.length);
          this.writeBytes(dhc5y1);
          this.writeByte(this.mode);
          break;
        case 4:
          var dhc5y1=this.encodeString(this.name);
          this.writeVaruint(dhc5y1.length);
          this.writeBytes(dhc5y1);
          this.writeByte(this.mode);
          break;
        default: break;
      }
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      var dhc5y1=this.readVaruint();
      this.name=this.decodeString(this.readBytes(dhc5y1));
      traceDecode('name');
      this.mode=this.readByte();
      traceDecode('mode');
      switch(this.mode) {
        case 0:
          var dhc5anbf=this.readVaruint();
          this.displayName=this.decodeString(this.readBytes(dhc5anbf));
          this.friendlyFlags=this.readByte();
          var dhc5y1df=this.readVaruint();
          this.nametagVisibility=this.decodeString(this.readBytes(dhc5y1df));
          var dhc5bxan=this.readVaruint();
          this.collisionRule=this.decodeString(this.readBytes(dhc5bxan));
          this.formatting=this.readVaruint();
          var dhc5cvag=this.readVaruint();
          this.prefix=this.decodeString(this.readBytes(dhc5cvag));
          var dhc5dzag=this.readVaruint();
          this.suffix=this.decodeString(this.readBytes(dhc5dzag));
          var aramcxev=this.readVaruint();
          this.players=[];
          for(var dhc5bfzj=0;dhc5bfzj<aramcxev;dhc5bfzj++) {
            var dhc5bfzj=this.readVaruint();
            this.players[dhc5bfzj]=this.decodeString(this.readBytes(dhc5bfzj));
          }
          break;
        case 1:
          break;
        case 2:
          var dhc5anbf=this.readVaruint();
          this.displayName=this.decodeString(this.readBytes(dhc5anbf));
          this.friendlyFlags=this.readByte();
          var dhc5y1df=this.readVaruint();
          this.nametagVisibility=this.decodeString(this.readBytes(dhc5y1df));
          var dhc5bxan=this.readVaruint();
          this.collisionRule=this.decodeString(this.readBytes(dhc5bxan));
          this.formatting=this.readVaruint();
          var dhc5cvag=this.readVaruint();
          this.prefix=this.decodeString(this.readBytes(dhc5cvag));
          var dhc5dzag=this.readVaruint();
          this.suffix=this.decodeString(this.readBytes(dhc5dzag));
          break;
        case 3:
          var aramcxev=this.readVaruint();
          this.players=[];
          for(var dhc5bfzj=0;dhc5bfzj<aramcxev;dhc5bfzj++) {
            var dhc5bfzj=this.readVaruint();
            this.players[dhc5bfzj]=this.decodeString(this.readBytes(dhc5bfzj));
          }
          break;
        case 4:
          var aramcxev=this.readVaruint();
          this.players=[];
          for(var dhc5bfzj=0;dhc5bfzj<aramcxev;dhc5bfzj++) {
            var dhc5bfzj=this.readVaruint();
            this.players[dhc5bfzj]=this.decodeString(this.readBytes(dhc5bfzj));
          }
          break;
        default: break;
      }
      return this;
    }

    /** @return {string} */
    toString() {
      return "Teams(name: " + this.name + ", mode: " + this.mode + ")";
    }

  }
  ,

  UpdateScore: class extends Packet {

    static get ID(){ return 72; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 72;
    }

    // action
    static get UPDATE(){ return 0; };
    static get REMOVE(){ return 1; };

    constructor(scoreName="", action=0, objectiveName="", value=0) {
      super();
      this.scoreName = scoreName;
      this.action = action;
      this.objectiveName = objectiveName;
      this.value = value;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      var dhc5y9z5=this.encodeString(this.scoreName);
      this.writeVaruint(dhc5y9z5.length);
      this.writeBytes(dhc5y9z5);
      this.writeByte(this.action);
      var dhc5ypyr=this.encodeString(this.objectiveName);
      this.writeVaruint(dhc5ypyr.length);
      this.writeBytes(dhc5ypyr);
      if(action==0) {
        this.writeVaruint(this.value);
      }
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      var dhc5y9z5=this.readVaruint();
      this.scoreName=this.decodeString(this.readBytes(dhc5y9z5));
      traceDecode('scoreName');
      this.action=this.readByte();
      traceDecode('action');
      var dhc5ypyr=this.readVaruint();
      this.objectiveName=this.decodeString(this.readBytes(dhc5ypyr));
      traceDecode('objectiveName');
      if(action==0) {
        this.value=this.readVaruint();
        traceDecode('value');
      }
      return this;
    }

    /** @return {string} */
    toString() {
      return "UpdateScore(scoreName: " + this.scoreName + ", action: " + this.action + ", objectiveName: " + this.objectiveName + ", value: " + this.value + ")";
    }

  }
  ,

  SpawnPosition: class extends Packet {

    static get ID(){ return 73; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 73;
    }

    constructor(position=0) {
      super();
      this.position = position;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeBigEndianLong(this.position);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.position=this.readBigEndianLong();
      traceDecode('position');
      return this;
    }

    /** @return {string} */
    toString() {
      return "SpawnPosition(position: " + this.position + ")";
    }

  }
  ,

  TimeUpdate: class extends Packet {

    static get ID(){ return 74; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 74;
    }

    constructor(worldAge=0, time=0) {
      super();
      this.worldAge = worldAge;
      this.time = time;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeBigEndianLong(this.worldAge);
      this.writeBigEndianLong(this.time);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.worldAge=this.readBigEndianLong();
      traceDecode('worldAge');
      this.time=this.readBigEndianLong();
      traceDecode('time');
      return this;
    }

    /** @return {string} */
    toString() {
      return "TimeUpdate(worldAge: " + this.worldAge + ", time: " + this.time + ")";
    }

  }
  ,

  Title: class extends Packet {

    static get ID(){ return 75; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 75;
    }

    // action (variant)
    static get SET_TITLE(){ return 0; };
    static get SET_SUBTITLE(){ return 1; };
    static get SET_ACTION_BAR(){ return 2; };
    static get SET_TIMINGS(){ return 3; };
    static get HIDE(){ return 4; };
    static get RESET(){ return 5; };

    constructor(action=0) {
      super();
      this.action = action;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.action);
      switch(this.action) {
        case 0:
          this.writeVaruint(this.action);
          break;
        case 1:
          this.writeVaruint(this.action);
          break;
        case 2:
          this.writeVaruint(this.action);
          break;
        case 3:
          this.writeVaruint(this.action);
          break;
        case 4:
          this.writeVaruint(this.action);
          break;
        case 5:
          this.writeVaruint(this.action);
          break;
        default: break;
      }
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.action=this.readVaruint();
      traceDecode('action');
      switch(this.action) {
        case 0:
          var dhc5zh=this.readVaruint();
          this.text=this.decodeString(this.readBytes(dhc5zh));
          break;
        case 1:
          var dhc5zh=this.readVaruint();
          this.text=this.decodeString(this.readBytes(dhc5zh));
          break;
        case 2:
          var dhc5zh=this.readVaruint();
          this.text=this.decodeString(this.readBytes(dhc5zh));
          break;
        case 3:
          this.fadeIn=this.readBigEndianInt();
          this.stay=this.readBigEndianInt();
          this.fadeOut=this.readBigEndianInt();
          break;
        case 4:
          break;
        case 5:
          break;
        default: break;
      }
      return this;
    }

    /** @return {string} */
    toString() {
      return "Title(action: " + this.action + ")";
    }

  }
  ,

  StopSound: class extends Packet {

    static get ID(){ return 76; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 76;
    }

    // source
    static get MASTER(){ return 0; };
    static get MUSIC(){ return 1; };
    static get RECORD(){ return 2; };
    static get WEATHER(){ return 3; };
    static get BLOCK(){ return 4; };
    static get HOSTILE(){ return 5; };
    static get NEUTRAL(){ return 6; };
    static get PLAYER(){ return 7; };
    static get AMBIENT(){ return 8; };
    static get VOICE(){ return 9; };

    constructor(flags=0, source=0, sound="") {
      super();
      this.flags = flags;
      this.source = source;
      this.sound = sound;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeByte(this.flags);
      if((flags&1)!=0) {
        this.writeVaruint(this.source);
      }
      if((flags&2)!=0) {
        var dhc5bvz=this.encodeString(this.sound);
        this.writeVaruint(dhc5bvz.length);
        this.writeBytes(dhc5bvz);
      }
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.flags=this.readByte();
      traceDecode('flags');
      if((flags&1)!=0) {
        this.source=this.readVaruint();
        traceDecode('source');
      }
      if((flags&2)!=0) {
        var dhc5bvz=this.readVaruint();
        this.sound=this.decodeString(this.readBytes(dhc5bvz));
        traceDecode('sound');
      }
      return this;
    }

    /** @return {string} */
    toString() {
      return "StopSound(flags: " + this.flags + ", source: " + this.source + ", sound: " + this.sound + ")";
    }

  }
  ,

  SoundEffect: class extends Packet {

    static get ID(){ return 77; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 77;
    }

    constructor(soundId=0, category=0, position={x:0,y:0,z:0}, volume=.0, pitch=.0) {
      super();
      this.soundId = soundId;
      this.category = category;
      this.position = position;
      this.volume = volume;
      this.pitch = pitch;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.soundId);
      this.writeVaruint(this.category);
      this.writeBigEndianInt(this.position.x);
      this.writeBigEndianInt(this.position.y);
      this.writeBigEndianInt(this.position.z);
      this.writeBigEndianFloat(this.volume);
      this.writeBigEndianFloat(this.pitch);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.soundId=this.readVaruint();
      traceDecode('soundId');
      this.category=this.readVaruint();
      traceDecode('category');
      this.position={};
      this.position.x=this.readBigEndianInt();
      this.position.y=this.readBigEndianInt();
      this.position.z=this.readBigEndianInt();
      traceDecode('position');
      this.volume=this.readBigEndianFloat();
      traceDecode('volume');
      this.pitch=this.readBigEndianFloat();
      traceDecode('pitch');
      return this;
    }

    /** @return {string} */
    toString() {
      return "SoundEffect(soundId: " + this.soundId + ", category: " + this.category + ", position: " + this.position + ", volume: " + this.volume + ", pitch: " + this.pitch + ")";
    }

  }
  ,

  PlayerListHeaderAndFooter: class extends Packet {

    static get ID(){ return 78; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 78;
    }

    constructor(header="", footer="") {
      super();
      this.header = header;
      this.footer = footer;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      var dhc5zfzi=this.encodeString(this.header);
      this.writeVaruint(dhc5zfzi.length);
      this.writeBytes(dhc5zfzi);
      var dhc5b9zi=this.encodeString(this.footer);
      this.writeVaruint(dhc5b9zi.length);
      this.writeBytes(dhc5b9zi);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      var dhc5zfzi=this.readVaruint();
      this.header=this.decodeString(this.readBytes(dhc5zfzi));
      traceDecode('header');
      var dhc5b9zi=this.readVaruint();
      this.footer=this.decodeString(this.readBytes(dhc5b9zi));
      traceDecode('footer');
      return this;
    }

    /** @return {string} */
    toString() {
      return "PlayerListHeaderAndFooter(header: " + this.header + ", footer: " + this.footer + ")";
    }

  }
  ,

  CollectItem: class extends Packet {

    static get ID(){ return 79; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 79;
    }

    constructor(collected=0, collector=0, count=0) {
      super();
      this.collected = collected;
      this.collector = collector;
      this.count = count;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.collected);
      this.writeVaruint(this.collector);
      this.writeVaruint(this.count);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.collected=this.readVaruint();
      traceDecode('collected');
      this.collector=this.readVaruint();
      traceDecode('collector');
      this.count=this.readVaruint();
      traceDecode('count');
      return this;
    }

    /** @return {string} */
    toString() {
      return "CollectItem(collected: " + this.collected + ", collector: " + this.collector + ", count: " + this.count + ")";
    }

  }
  ,

  EntityTeleport: class extends Packet {

    static get ID(){ return 80; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 80;
    }

    constructor(entityId=0, position={x:0,y:0,z:0}, yaw=0, pitch=0, onGround=false) {
      super();
      this.entityId = entityId;
      this.position = position;
      this.yaw = yaw;
      this.pitch = pitch;
      this.onGround = onGround;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.entityId);
      this.writeBigEndianDouble(this.position.x);
      this.writeBigEndianDouble(this.position.y);
      this.writeBigEndianDouble(this.position.z);
      this.writeByte(this.yaw);
      this.writeByte(this.pitch);
      this.writeBool(this.onGround);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.entityId=this.readVaruint();
      traceDecode('entityId');
      this.position={};
      this.position.x=this.readBigEndianDouble();
      this.position.y=this.readBigEndianDouble();
      this.position.z=this.readBigEndianDouble();
      traceDecode('position');
      this.yaw=this.readByte();
      traceDecode('yaw');
      this.pitch=this.readByte();
      traceDecode('pitch');
      this.onGround=this.readBool();
      traceDecode('onGround');
      return this;
    }

    /** @return {string} */
    toString() {
      return "EntityTeleport(entityId: " + this.entityId + ", position: " + this.position + ", yaw: " + this.yaw + ", pitch: " + this.pitch + ", onGround: " + this.onGround + ")";
    }

  }
  ,

  Advencements: class extends Packet {

    static get ID(){ return 81; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 81;
    }

    constructor() {
      super();
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      return this;
    }

    /** @return {string} */
    toString() {
      return "Advencements()";
    }

  }
  ,

  EntityProperties: class extends Packet {

    static get ID(){ return 82; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 82;
    }

    constructor(entityId=0, attributes=[]) {
      super();
      this.entityId = entityId;
      this.attributes = attributes;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.entityId);
      this.writeBigEndianInt(this.attributes.length);
      for(var dhc5draj in this.attributes) {
        this.writeBytes(this.attributes[dhc5draj].encodeBody(true));
      }
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.entityId=this.readVaruint();
      traceDecode('entityId');
      var aramyrcl=this.readBigEndianInt();
      this.attributes=[];
      for(var dhc5draj=0;dhc5draj<aramyrcl;dhc5draj++) {
        this.attributes[dhc5draj]=new Types.Attribute().decodeBody(this._buffer);
        this._buffer=this.attributes[dhc5draj]._buffer;
      }
      traceDecode('attributes');
      return this;
    }

    /** @return {string} */
    toString() {
      return "EntityProperties(entityId: " + this.entityId + ", attributes: " + this.attributes + ")";
    }

  }
  ,

  EntityEffect: class extends Packet {

    static get ID(){ return 83; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 83;
    }

    // effect id
    static get SPEED(){ return 1; };
    static get SLOWNESS(){ return 2; };
    static get HASTE(){ return 3; };
    static get MINING_FATIGUE(){ return 4; };
    static get STRENGTH(){ return 5; };
    static get INSTANT_HEALTH(){ return 6; };
    static get INSTANT_DAMAGE(){ return 7; };
    static get JUMP_BOOST(){ return 8; };
    static get NAUSEA(){ return 9; };
    static get REGENERATION(){ return 10; };
    static get RESISTANCE(){ return 11; };
    static get FIRE_RESISTANCE(){ return 12; };
    static get WATER_BREATHING(){ return 13; };
    static get INVISIBILITY(){ return 14; };
    static get BLINDNESS(){ return 15; };
    static get NIGHT_VISION(){ return 16; };
    static get HUNGER(){ return 17; };
    static get WEAKNESS(){ return 18; };
    static get POISON(){ return 19; };
    static get WITHER(){ return 20; };
    static get HEALTH_BOOST(){ return 21; };
    static get ABSORPTION(){ return 22; };
    static get SATURATION(){ return 23; };
    static get GLOWING(){ return 24; };
    static get LEVITATION(){ return 25; };
    static get LUCK(){ return 26; };
    static get BAD_LUCK(){ return 27; };

    // flags
    static get AMBIENT(){ return 1; };
    static get SHOW_PARTICLES(){ return 2; };

    constructor(entityId=0, effectId=0, amplifier=0, duration=0, flags=0) {
      super();
      this.entityId = entityId;
      this.effectId = effectId;
      this.amplifier = amplifier;
      this.duration = duration;
      this.flags = flags;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.entityId);
      this.writeByte(this.effectId);
      this.writeByte(this.amplifier);
      this.writeVaruint(this.duration);
      this.writeByte(this.flags);
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      this.entityId=this.readVaruint();
      traceDecode('entityId');
      this.effectId=this.readByte();
      traceDecode('effectId');
      this.amplifier=this.readByte();
      traceDecode('amplifier');
      this.duration=this.readVaruint();
      traceDecode('duration');
      this.flags=this.readByte();
      traceDecode('flags');
      return this;
    }

    /** @return {string} */
    toString() {
      return "EntityEffect(entityId: " + this.entityId + ", effectId: " + this.effectId + ", amplifier: " + this.amplifier + ", duration: " + this.duration + ", flags: " + this.flags + ")";
    }

  }
  ,

  DeclareRecipes: class extends Packet {

    static get ID(){ return 84; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 84;
    }

    constructor(recipes=[]) {
      super();
      this.recipes = recipes;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.recipes.length);
      for(var dhc5zncv in this.recipes) {
        this.writeBytes(this.recipes[dhc5zncv].encodeBody(true));
      }
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      var aramcvab=this.readVaruint();
      this.recipes=[];
      for(var dhc5zncv=0;dhc5zncv<aramcvab;dhc5zncv++) {
        this.recipes[dhc5zncv]=new Types.Recipe().decodeBody(this._buffer);
        this._buffer=this.recipes[dhc5zncv]._buffer;
      }
      traceDecode('recipes');
      return this;
    }

    /** @return {string} */
    toString() {
      return "DeclareRecipes(recipes: " + this.recipes + ")";
    }

  }
  ,

  Tags: class extends Packet {

    static get ID(){ return 85; };

    static get CLIENTBOUND(){ return true; };
    static get SERVERBOUND(){ return false; };

    getId() {
      return 85;
    }

    constructor(blockTags=[], itemTags=[], fluidTags=[]) {
      super();
      this.blockTags = blockTags;
      this.itemTags = itemTags;
      this.fluidTags = fluidTags;
    }

    /** @return {Uint8Array} */
    encodeBody(reset) {
      if(reset) {
        this.reset();
      }
      this.writeVaruint(this.blockTags.length);
      for(var dhc5b9ar in this.blockTags) {
        this.writeBytes(this.blockTags[dhc5b9ar].encodeBody(true));
      }
      this.writeVaruint(this.itemTags.length);
      for(var dhc5dvvf in this.itemTags) {
        this.writeBytes(this.itemTags[dhc5dvvf].encodeBody(true));
      }
      this.writeVaruint(this.fluidTags.length);
      for(var dhc5bvzr in this.fluidTags) {
        this.writeBytes(this.fluidTags[dhc5bvzr].encodeBody(true));
      }
      return new Uint8Array(this._buffer);
    }

    /** @param {(Uint8Array|Array)} buffer */
    decodeBody(_buffer) {
      this._buffer=Array.from(_buffer);
      initDecode(this);
      var aramyxyt=this.readVaruint();
      this.blockTags=[];
      for(var dhc5b9ar=0;dhc5b9ar<aramyxyt;dhc5b9ar++) {
        this.blockTags[dhc5b9ar]=new Types.Tag().decodeBody(this._buffer);
        this._buffer=this.blockTags[dhc5b9ar]._buffer;
      }
      traceDecode('blockTags');
      var aramarbr=this.readVaruint();
      this.itemTags=[];
      for(var dhc5dvvf=0;dhc5dvvf<aramarbr;dhc5dvvf++) {
        this.itemTags[dhc5dvvf]=new Types.Tag().decodeBody(this._buffer);
        this._buffer=this.itemTags[dhc5dvvf]._buffer;
      }
      traceDecode('itemTags');
      var aramzxar=this.readVaruint();
      this.fluidTags=[];
      for(var dhc5bvzr=0;dhc5bvzr<aramzxar;dhc5bvzr++) {
        this.fluidTags[dhc5bvzr]=new Types.Tag().decodeBody(this._buffer);
        this._buffer=this.fluidTags[dhc5bvzr]._buffer;
      }
      traceDecode('fluidTags');
      return this;
    }

    /** @return {string} */
    toString() {
      return "Tags(blockTags: " + this.blockTags + ", itemTags: " + this.itemTags + ", fluidTags: " + this.fluidTags + ")";
    }

  }

}

export { PlayClientbound };
